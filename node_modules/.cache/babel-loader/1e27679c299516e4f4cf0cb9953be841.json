{"ast":null,"code":"import _classCallCheck from \"/home/lhq/Workspace/sim-cpu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lhq/Workspace/sim-cpu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar stats = [\"\", \"SAOK\", \"SADR\", \"SINS\", \"SHLT\", \"SBUB\"];\nvar icodes = [\"HALT\", \"NOP\", \"RRMOVQ\", \"IRMOVQ\", \"RMMOVQ\", \"MRMOVQ\", \"OPQ\", \"JXX\", \"CALL\", \"RET\", \"PUSHQ\", \"IPOPQ\"];\nvar regs = [\"rax\", \"rcx\", \"rdx\", \"rbx\", \"rsp\", \"rbp\", \"rsi\", \"rdi\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"\"];\nvar breakpoints = new Set();\nexport var Pipe =\n/*#__PURE__*/\nfunction () {\n  function Pipe() {\n    _classCallCheck(this, Pipe);\n\n    this.Memory = Memory;\n  }\n\n  _createClass(Pipe, [{\n    key: \"getRegisterFile\",\n    value: function getRegisterFile() {\n      var rtn = [\"\"];\n      rtn.length = 16;\n\n      for (var i = 0; i < 16; i++) {\n        rtn[i] = valToHex(registerFile.registers[i]);\n      }\n\n      return rtn;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      _init();\n\n      breakpoints.clear();\n    }\n  }, {\n    key: \"setCode\",\n    value: function setCode(str) {\n      _setCode(str);\n\n      _init();\n    }\n  }, {\n    key: \"addBreakpoint\",\n    value: function addBreakpoint(str) {\n      breakpoints.add(str);\n    }\n  }, {\n    key: \"deleteBreakpoint\",\n    value: function deleteBreakpoint(str) {\n      breakpoints.delete(str);\n    }\n  }, {\n    key: \"hasBreakpoint\",\n    value: function hasBreakpoint(str) {\n      return breakpoints.has(str);\n    }\n  }, {\n    key: \"stepi\",\n    value: function stepi(i) {\n      return _stepi(i);\n    }\n  }, {\n    key: \"run\",\n    value: function run(time) {\n      setTimeout(function func() {\n        if (!(Stat == SINS || Stat == SADR || Stat == SHLT)) {\n          _stepi(1);\n\n          console.log(\"step\");\n          setTimeout(func, time);\n        }\n      }, time);\n    }\n  }, {\n    key: \"getPC\",\n    value: function getPC() {\n      return valToHex(F_predPC);\n    }\n  }, {\n    key: \"getStat\",\n    value: function getStat() {\n      return Stat;\n    } //return [ [addr, hex_val ],...]\n\n  }, {\n    key: \"getMemory\",\n    value: function getMemory() {\n      var rtn = [];\n      var pair = [\"addr\", \"hex_val\"];\n\n      for (var i = MAX_MEM - 8 >> 3 << 3; i >= 0; i -= 8) {\n        var x = valToHex(readMemory(i));\n\n        if (x != \"0\") {\n          var j = i >> 3;\n          pair[0] = i.toString(16);\n          pair[1] = x;\n          rtn.push(pair.slice());\n        }\n      }\n\n      return rtn;\n    }\n  }, {\n    key: \"getStageStuffs\",\n    value: function getStageStuffs() {\n      return [[[\"m_stat\", stats[m_stat]], [\"m_icode\", icodes[m_icode]], [\"m_valE\", valToHex(m_valE)], [\"m_valM\", valToHex(m_valM)], [\"m_dstE\", regs[m_dstE]], [\"m_dstM\", regs[m_dstM]]], [[\"e_stat\", stats[e_stat]], [\"e_icodes\", icodes[e_icode]], [\"e_Cnd\", e_Cnd ? \"Y\" : \"N\"], [\"e_valE\", valToHex(e_valE)], [\"e_valA\", valToHex(e_valA)], [\"e_dstE\", regs[e_dstE]], [\"e_dstM\", regs[e_dstM]]], [[\"d_stat\", stats[d_stat]], [\"d_icode\", icodes[d_icode]], [\"d_ifun\", \"\" + d_ifun], [\"d_valC\", valToHex(d_valC)], [\"d_valA\", valToHex(d_valA)], [\"d_valB\", valToHex(d_valB)], [\"d_dstE\", regs[d_dstE]], [\"d_dstM\", regs[d_dstM]], [\"d_srcA\", regs[d_srcA]], [\"d_srcB\", regs[d_srcB]]], [[\"f_stat\", stats[f_stat]], [\"f_icode\", icodes[f_icode]], [\"f_ifun\", \"\" + f_ifun], [\"f_rA\", regs[f_rA]], [\"f_rB\", regs[f_rB]], [\"f_valC\", valToHex(f_valC)], [\"f_valP\", valToHex(f_valP)]], [[\"predPC\", valToHex(F_predPC)]]];\n    }\n  }, {\n    key: \"getStageRegisters\",\n    value: function getStageRegisters() {\n      return [[[\"stat\", stats[W_stat]], [\"icode\", icodes[W_icode]], [\"valE\", valToHex(W_valE)], [\"valM\", valToHex(W_valM)], [\"dstE\", regs[W_dstE]], [\"dstM\", regs[W_dstM]]], [[\"stat\", stats[M_stat]], [\"icodes\", icodes[M_icode]], [\"Cnd\", M_Cnd ? \"Y\" : \"N\"], [\"valE\", valToHex(M_valE)], [\"valA\", valToHex(M_valA)], [\"dstE\", regs[M_dstE]], [\"dstM\", regs[M_dstM]]], [[\"stat\", stats[E_stat]], [\"icode\", icodes[E_icode]], [\"ifun\", \"\" + E_ifun], [\"valC\", valToHex(E_valC)], [\"valA\", valToHex(E_valA)], [\"valB\", valToHex(E_valB)], [\"dstE\", regs[E_dstE]], [\"dstM\", regs[E_dstM]], [\"srcA\", regs[E_srcA]], [\"srcB\", regs[E_srcB]]], [[\"stat\", stats[D_stat]], [\"icode\", icodes[D_icode]], [\"ifun\", \"\" + D_ifun], [\"rA\", regs[D_rA]], [\"rB\", regs[D_rB]], [\"valC\", valToHex(D_valC)], [\"valP\", valToHex(D_valP)]], [[\"predPC\", valToHex(F_predPC)]]];\n    }\n  }]);\n\n  return Pipe;\n}();\n/* Classes */\n\nvar RegisterFile =\n/*#__PURE__*/\nfunction () {\n  function RegisterFile() {\n    _classCallCheck(this, RegisterFile);\n\n    this.A = VALZERO.slice();\n    this.B = VALZERO.slice();\n    this.M = VALZERO.slice();\n    this.E = VALZERO.slice();\n    /*this.B = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    this.M = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    this.E = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    */\n\n    this.srcA = this.srcB = this.dstM = this.dstE = RNONE;\n    this.registers = [VALZERO.slice()];\n    this.registers.length = 16;\n\n    for (var i = 0; i < 16; i++) {\n      this.registers[i] = this.A;\n    }\n\n    console.log(this.registers);\n  }\n\n  _createClass(RegisterFile, [{\n    key: \"reset\",\n    value: function reset() {\n      this.A = VALZERO.slice();\n      this.B = VALZERO.slice();\n      this.M = VALZERO.slice();\n      this.E = VALZERO.slice();\n\n      for (var i = 0; i < 16; i++) {\n        this.registers[i] = VALZERO.slice();\n      }\n\n      this.srcA = this.srcB = this.dstM = this.dstE = RNONE;\n    }\n  }, {\n    key: \"read\",\n    value: function read() {\n      this.A = this.registers[this.srcA].slice();\n      this.B = this.registers[this.srcB].slice();\n    }\n  }, {\n    key: \"write\",\n    value: function write() {\n      //!caution, if dstE == dstM(!=RNONE)(e.g. pop %rsp), only to write dstM\n      this.registers[this.dstE] = this.E.slice();\n      this.registers[this.dstM] = this.M.slice();\n    }\n  }]);\n\n  return RegisterFile;\n}();\n/* Classes end */\n\n\nvar MAX_MEM = 800;\nvar IHALT = 0,\n    INOP = 1,\n    IRRMOVQ = 2,\n    IIRMOVQ = 3,\n    IRMMOVQ = 4,\n    IMRMOVQ = 5,\n    IOPQ = 6,\n    IJXX = 7,\n    ICALL = 8,\n    IRET = 9,\n    IPUSHQ = 10,\n    IPOPQ = 11;\nvar FNONE = 0;\nvar RNONE = 15,\n    RRSP = 4;\nvar ALUADD = 0;\nvar SAOK = 1,\n    SADR = 2,\n    SINS = 3,\n    SHLT = 4,\n    SBUB = 5;\nvar ZF = 4,\n    SF = 2,\n    OF = 1;\nvar VALZERO = [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"];\n/**  Stage Registers **/\n\nvar F_predPC = VALZERO.slice(),\n    F_stall,\n    F_bubble;\nvar D_stat, D_icode, D_ifun, D_rA, D_rB, D_valC, D_valP, D_stall, D_bubble;\nvar E_stat, E_icode, E_ifun, E_dstE, E_dstM, E_srcA, E_srcB, E_valA, E_valB, E_valC, E_stall, E_bubble;\nvar M_stat, M_icode, M_Cnd, M_dstE, M_dstM, M_valA, M_valE, M_stall, M_bubble;\nvar W_stat, W_icode, W_dstE, W_dstM, W_valM, W_valE, W_stall, W_bubble;\n/** Stage outputs **/\n\nvar f_predPC, f_stat, f_icode, f_ifun, f_rA, f_rB, f_valC, f_valP, f_stall, f_bubble;\nvar d_stat, d_icode, d_ifun, d_valA, d_valB, d_valC, d_dstE, d_dstM, d_srcA, d_srcB, d_stall, d_bubble;\nvar e_stat, e_icode, e_Cnd, e_dstE, e_dstM, e_valA, e_valE, e_stall, e_bubble;\nvar m_stat, m_icode, m_dstE, m_dstM, m_valM, m_valE, m_stall, m_bubble;\nvar imem_error, dmem_error;\nvar Memory = [\"0\"];\nMemory.length = MAX_MEM;\nvar registerFile = new RegisterFile();\nvar alu_cc;\nvar set_cc;\nvar CC;\nvar Stat; //everything named val is stored by string array ,each byte\n//should be positive;\n\nfunction intToVal(x) {\n  var rtn = VALZERO.slice();\n  rtn.length = 8;\n\n  for (var i = 0; i < 8; i++) {\n    var temp = x & 0xff;\n    rtn[i] = temp.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n    x >>= 8;\n  }\n\n  return rtn;\n}\n/* return string */\n\n\nfunction valToHex(val) {\n  if (val == undefined) return \"0\";\n  var rtn = \"\";\n  var zero_front = true;\n  var i = 7;\n\n  while (i >= 0 && parseInt(val[i], 16) == 0) {\n    i--;\n  }\n\n  if (i < 0) return \"0\";\n  if (val[i][0] != \"0\") rtn += val[i][0];\n  rtn += val[i][1];\n\n  for (var j = i - 1; j >= 0; j--) {\n    rtn += val[j][0] + val[j][1];\n  }\n\n  return rtn;\n} //return a val\n\n\nfunction addq(valA, valB) {\n  var rtn = VALZERO.slice();\n  rtn.length = 8;\n  var carry = 0;\n\n  for (var i = 0; i < 8; i++) {\n    var int_sum = parseInt(valA[i], 16) + parseInt(valB[i], 16) + carry;\n    carry = int_sum >> 8;\n    var s = int_sum & 0xff;\n    var str_s = s.toString(16);\n    if (str_s.length == 1) rtn[i] = \"0\" + str_s;else rtn[i] = str_s;\n  } //overflow\n  //if (carry) console.log(\"overflow\");\n\n\n  return rtn;\n}\n\nfunction subq(valA, valB) {\n  var rtn = VALZERO.slice();\n  var notB = xorq(valB, [\"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\"]);\n  return addq(valA, addq(notB, [\"01\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"]));\n}\n\nfunction andq(valA, valB) {\n  var rtn = VALZERO.slice();\n  rtn.length = 8;\n\n  for (var i = 0; i < 8; i++) {\n    var s = parseInt(valA[i], 16) & parseInt(valB[i], 16) & 0xff;\n    rtn[i] = s.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n  }\n\n  return rtn;\n}\n\nfunction xorq(valA, valB) {\n  var rtn = VALZERO.slice();\n  rtn.length = 8;\n\n  for (var i = 0; i < 8; i++) {\n    var s = (parseInt(valA[i], 16) ^ parseInt(valB[i], 16)) & 0xff;\n    rtn[i] = s.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n  }\n\n  return rtn;\n}\n/* read eight bytes from memory, return null when error*/\n\n/* return rtn = [\"00\", \"02\", ...] */\n\n\nfunction readMemory(addr) {\n  var bytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n\n  if (addr + bytes > MAX_MEM || addr < 0) {\n    return null;\n  }\n\n  var rtn = VALZERO.slice();\n  rtn.length = bytes;\n\n  for (var i = 0; i < bytes; i++) {\n    rtn[i] = Memory[addr + i];\n    if (rtn[i] == undefined) rtn[i] = \"00\";\n  }\n\n  return rtn;\n}\n/* write val into memory e.g. val = [\"00\", \"01\"]*/\n\n\nfunction writeMemory(addr, val) {\n  var len = val.length;\n  if (addr + len > MAX_MEM || addr < 0) return null;\n\n  for (var i = 0; i < len; i++) {\n    Memory[addr + i] = val[i];\n  }\n\n  return true;\n}\n\nfunction _setCode(code) {\n  var isValid = true;\n\n  for (var i = 0; i < code.length; i++) {\n    if (code[i] == \"\\n\") {\n      isValid = true;\n      continue;\n    }\n\n    if (isValid && i + 2 < code.length && code[i] == \"0\" && code[i + 1] == \"x\") {\n      isValid = false;\n      var hex_addr = \"\";\n      var addr = void 0;\n      i++; //console.log(\"find it\" + code[i + 2] + code[i + 3] + code[i + 4]);\n\n      while (code[++i] == \"0\") {}\n\n      while (code[i] != \":\") {\n        hex_addr += code[i++];\n      }\n\n      addr = parseInt(hex_addr, 16);\n\n      if (isNaN(addr)) {\n        addr = 0;\n      }\n\n      i += 2;\n      var j = void 0;\n\n      for (j = 0; i + j < code.length && code[i + j] != \" \"; j = j + 2) {\n        Memory[addr + (j >> 1)] = code[i + j];\n        Memory[addr + (j >> 1)] += code[i + j + 1];\n      }\n\n      i += j - 1;\n    } else isValid = false;\n  }\n}\n\nfunction ops(a, b, ifun) {\n  var rtn;\n\n  switch (ifun) {\n    case 0:\n      rtn = addq(a, b);\n      break;\n\n    case 1:\n      rtn = subq(a, b);\n      break;\n\n    case 2:\n      rtn = andq(a, b);\n      break;\n\n    case 3:\n      rtn = xorq(a, b);\n      break;\n\n    default:\n      rtn = null;\n      break;\n  }\n\n  var rtn_sign = parseInt(rtn[7], 16) >> 7;\n  var a_sign = parseInt(a[7], 16) >> 7;\n  var b_sign = parseInt(b[7], 16) >> 7;\n  alu_cc = 0;\n  if (parseInt(valToHex(rtn), 16) == 0) alu_cc |= ZF;\n  if (rtn_sign == 1) alu_cc |= SF;\n  if (a_sign == b_sign && rtn_sign != a_sign) alu_cc |= OF;\n  return rtn;\n}\n/* long long */\n\n\nfunction check_f_pc() {\n  //!Mispredicted branch. Fetch at incremented PC\n  if (M_icode == IJXX && !M_Cnd) return M_valA; //!Completion of RET instruction\n  else if (W_icode == IRET) return W_valM; //!Default: Use predicted P\n    else return F_predPC;\n} // return bool\n\n\nfunction check_f_instr_valid(icode, ifun) {\n  switch (icode) {\n    case IJXX:\n    case IRRMOVQ:\n      return ifun < 7;\n\n    case IOPQ:\n      return ifun < 4;\n\n    default:\n      return ifun < 1;\n  }\n} //return bool\n\n\nfunction check_f_need_regids(icode) {\n  switch (icode) {\n    case IHALT:\n    case INOP:\n    case IJXX:\n    case ICALL:\n    case IRET:\n      return false;\n\n    default:\n      return true;\n  }\n} //return bool\n\n\nfunction check_f_need_valC(icode) {\n  switch (icode) {\n    case IIRMOVQ:\n    case IRMMOVQ:\n    case IMRMOVQ:\n    case IJXX:\n    case ICALL:\n      return true;\n\n    default:\n      return false;\n  }\n} //return int\n\n\nfunction check_f_stat(imem_error, instr_valid, icode) {\n  if (imem_error == true) return SADR;else if (!instr_valid == true) return SINS;else if (icode == IHALT) return SHLT;else return SAOK;\n} //return int\n\n\nfunction check_d_srcA() {\n  switch (D_icode) {\n    case IRRMOVQ:\n    case IRMMOVQ:\n    case IOPQ:\n    case IPUSHQ:\n      return D_rA;\n\n    case IPOPQ:\n    case IRET:\n      return RRSP;\n\n    default:\n      return RNONE;\n  }\n} //return  int\n\n\nfunction check_d_srcB() {\n  switch (D_icode) {\n    case IMRMOVQ:\n    case IRMMOVQ:\n    case IOPQ:\n      return D_rB;\n\n    case IPUSHQ:\n    case IPOPQ:\n    case ICALL:\n    case IRET:\n      return RRSP;\n\n    default:\n      return RNONE;\n  }\n} //return int\n\n\nfunction check_d_dstM() {\n  switch (D_icode) {\n    case IMRMOVQ:\n    case IPOPQ:\n      return D_rA;\n\n    default:\n      return RNONE;\n  }\n} //return int\n\n\nfunction check_d_dstE() {\n  switch (D_icode) {\n    case IRRMOVQ: //condition move\n\n    case IIRMOVQ:\n    case IOPQ:\n      return D_rB;\n\n    case IPUSHQ:\n    case IPOPQ:\n    case ICALL:\n    case IRET:\n      return RRSP;\n\n    default:\n      return RNONE;\n  }\n} //return long long(long long d_rvalA)\n\n\nfunction check_d_valA(d_srcA, d_rvalA) {\n  if (D_icode == ICALL || D_icode == IJXX) {\n    return D_valP;\n  } else if (d_srcA == e_dstE) {\n    return e_valE;\n  } else if (d_srcA == M_dstM) {\n    return m_valM;\n  } else if (d_srcA == M_dstE) {\n    return M_valE;\n  } else if (d_srcA == W_dstM) {\n    return W_valM;\n  } else if (d_srcA == W_dstE) {\n    return W_valE;\n  } else return d_rvalA;\n} //return long long(long long d_rvalB)\n\n\nfunction check_d_valB(d_srcB, d_rvalB) {\n  if (d_srcB == e_dstE) {\n    return e_valE;\n  } else if (d_srcB == M_dstM) {\n    return m_valM;\n  } else if (d_srcB == M_dstE) {\n    return M_valE;\n  } else if (d_srcB == W_dstM) {\n    return W_valM;\n  } else if (d_srcB == W_dstE) {\n    return W_valE;\n  } else return d_rvalB;\n} //long long: return, valA, valC\n\n\nfunction check_e_aluA(icode, valA, valC) {\n  switch (icode) {\n    case IRRMOVQ:\n    case IOPQ:\n      return valA;\n\n    case IIRMOVQ:\n    case IRMMOVQ:\n    case IMRMOVQ:\n      return valC;\n\n    case ICALL:\n    case IPUSHQ:\n      return [\"f8\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\"];\n    //subq(VALZERO.slice());\n\n    case IRET:\n    case IPOPQ:\n      return [\"08\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"];\n    //other operation don't need aluB\n\n    default:\n      return VALZERO;\n  }\n} //long long: return, valB, valC\n\n\nfunction check_e_aluB(icode, valB, valC) {\n  switch (icode) {\n    case IRMMOVQ:\n    case IMRMOVQ:\n    case IOPQ:\n    case ICALL:\n    case IPUSHQ:\n    case IRET:\n    case IPOPQ:\n      return valB;\n\n    case IRRMOVQ:\n    case IIRMOVQ:\n      return VALZERO;\n    //other operation don't need aluB\n\n    default:\n      return VALZERO;\n  }\n} //long long: return, a, b, t\n//!alu_cc global, modify it also\n\n\nfunction check_e_valE(alufun, valA, valB) {\n  return ops(valA, valB, alufun);\n} //return bool\n\n/************ modify it ***********/\n\n\nfunction check_e_cond(ifun) {\n  switch (ifun) {\n    case 1:\n      return CC & (ZF | SF);\n\n    case 2:\n      return CC & SF;\n\n    case 3:\n      return CC & ZF;\n\n    case 4:\n      return !(CC & ZF);\n\n    case 5:\n      return !(CC & SF);\n\n    case 6:\n      return !(CC & (ZF | SF));\n\n    default:\n      return true;\n  }\n} //long long: return, valA, valE\n\n\nfunction check_m_mem_addr(icode, valA, valE) {\n  switch (icode) {\n    case IRMMOVQ:\n    case IPUSHQ:\n    case ICALL:\n    case IMRMOVQ:\n      return valE;\n\n    case IPOPQ:\n    case IRET:\n      return valA;\n\n    default:\n      return VALZERO;\n  }\n}\n\nfunction doFetch() {\n  /* Stage values */\n  //bool\n  var instr_valid, need_regids, need_valC; //let imem_error;\n\n  var stat;\n  /* should be long long */\n\n  var pc;\n  var predPC;\n  var valC, valP; //int\n\n  var split, align;\n  var icode, ifun;\n  var rA, rB;\n  /** Select PC **/\n  //now pc is a int\n\n  pc = parseInt(valToHex(check_f_pc()), 16); //console.log(\"pc is\" + pc);\n\n  /** Fetch **/\n\n  split = readMemory(pc, 1);\n  align = readMemory(pc + 1, 1); //console.log(split);\n  //console.log(align);\n\n  icode = parseInt(split[0][0], 16);\n  ifun = parseInt(split[0][1], 16); //console.log(\"icode: \" + icode + \", ifun\" + ifun);\n  //bool\n\n  instr_valid = check_f_instr_valid(icode, ifun);\n  need_regids = check_f_need_regids(icode);\n  need_valC = check_f_need_valC(icode); //console.log(need_regids);\n\n  stat = check_f_stat(imem_error, instr_valid, icode);\n  rA = need_regids ? parseInt(align[0][0], 16) : RNONE;\n  rB = need_regids ? parseInt(align[0][1], 16) : RNONE;\n  valC = need_valC ? readMemory(pc + 1 + need_regids) : VALZERO.slice();\n  valP = intToVal(pc + 1 + need_regids + (need_valC << 3));\n  predPC = icode == IJXX || icode == ICALL ? intToVal(parseInt(valToHex(valC), 16)) : valP;\n  /** Update **/\n\n  f_stat = stat;\n  f_icode = icode;\n  f_ifun = ifun;\n  f_rA = rA;\n  f_rB = rB;\n  f_valC = valC.slice();\n  f_valP = valP.slice();\n  f_predPC = predPC.slice();\n  /*\n  console.log(\"f_stat: \" + f_stat);\n  console.log(\"f_icode: \" + f_icode);\n  console.log(\"f_ifun: \" + f_ifun);\n  console.log(\"f_rA: \" + f_rA);\n  console.log(\"f_rB:\" + f_rB);\n   console.log(\"f_valC: \" + f_valC);\n  console.log(\"f_valP: \" + f_valP);\n  console.log(\"f_predPC: \" + f_predPC);*/\n}\n\nfunction doDecode() {\n  var stat;\n  var rvalA, rvalB;\n  var dstE, dstM;\n  var valA, valB;\n  var srcA, srcB;\n  dstE = check_d_dstE();\n  dstM = check_d_dstM();\n  srcA = check_d_srcA();\n  srcB = check_d_srcB();\n  registerFile.srcA = srcA;\n  registerFile.srcB = srcB; ///read registerFile as if it were a combinational logic\n  ///i.e. update the read port A B immediately.\n\n  registerFile.read(); //should not be modified;\n\n  rvalA = registerFile.A;\n  rvalB = registerFile.B;\n  /** Sel + Fwd A and Fwd B **/\n\n  valA = check_d_valA(srcA, rvalA);\n  valB = check_d_valB(srcB, rvalB);\n  /** Update **/\n\n  Stat = W_stat == SBUB ? SAOK : W_stat;\n  d_stat = D_stat;\n  d_icode = D_icode;\n  d_ifun = D_ifun;\n  d_valC = D_valC.slice();\n  d_valA = valA.slice();\n  d_valB = valB.slice();\n  d_dstE = dstE;\n  d_dstM = dstM;\n  d_srcA = srcA;\n  d_srcB = srcB;\n  /** print **/\n\n  console.log(\"d_stat: \" + d_stat);\n  console.log(\"d_icode: \" + d_icode);\n  console.log(\"d_ifun: \" + d_ifun);\n  console.log(\"d_valC: \" + d_valC);\n  console.log(\"d_valA: \" + d_valA);\n  console.log(\"d_valB: \" + d_valB);\n  console.log(\"d_dstE: \" + d_dstE);\n  return 0;\n}\n\nfunction doExecute() {\n  //alu_cc;//!cc from alu\n  var cond;\n  var alufun;\n  var dstE;\n  var aluA, aluB;\n  var valE;\n  alufun = E_icode == IOPQ ? E_ifun : ALUADD;\n  aluA = check_e_aluA(E_icode, E_valA, E_valC);\n  aluB = check_e_aluB(E_icode, E_valB, E_valC);\n  set_cc = E_icode == IOPQ && !(m_stat == SADR || m_stat == SINS || m_stat == SHLT || W_stat == SADR || W_stat == SINS || W_stat == SHLT); //!also update alu_cc\n\n  valE = ops(aluB, aluA, alufun);\n  cond = !!check_e_cond(E_ifun); //!update dstE according to condition codes\n\n  dstE = E_icode == IRRMOVQ ? cond ? E_dstE : RNONE : E_dstE;\n  /** Update **/\n\n  if (set_cc) {\n    CC = alu_cc;\n    console.log(\"updateCC: \" + CC);\n  }\n\n  e_stat = E_stat;\n  e_icode = E_icode;\n  e_Cnd = cond;\n  e_valE = valE.slice();\n  e_valA = E_valA.slice();\n  e_dstE = dstE;\n  e_dstM = E_dstM;\n  /*\n  console.log(\"CC: \" + CC);\n  console.log(\"e_stat: \" + e_stat);\n  console.log(\"e_icode: \" + e_icode);\n  console.log(\"e_Cnd: \" + e_Cnd);\n  console.log(\"e_valE: \" + e_valE);\n  console.log(\"e_valA: \" + e_valA);\n  console.log(\"e_dstE: \" + e_dstE);\n  console.log(\"e_dstM: \" + e_dstM);\n  */\n}\n\nfunction doMemory() {\n  var stat;\n  dmem_error = false;\n  var mem_read, mem_write; //long long\n\n  var data_in, addr;\n  var valM = VALZERO.slice();\n  mem_read = M_icode == IMRMOVQ || M_icode == IPOPQ || M_icode == IRET;\n  mem_write = M_icode == IRMMOVQ || M_icode == IPUSHQ || M_icode == ICALL;\n  addr = parseInt(valToHex(check_m_mem_addr(M_icode, M_valA, M_valE)), 16);\n  data_in = M_valA;\n  if (mem_read) valM = readMemory(addr, 8);\n  var temp = 1;\n\n  if (mem_write) {\n    temp = writeMemory(addr, data_in);\n  }\n\n  if (valM == null || temp == null) dmem_error = true;\n  stat = dmem_error ? SADR : M_stat;\n  /** Update **/\n\n  m_stat = stat;\n  m_icode = M_icode;\n  m_valE = M_valE.slice();\n  m_valM = valM.slice();\n  m_dstE = M_dstE;\n  m_dstM = M_dstM;\n  console.log(\"\");\n}\n\nfunction doWriteback() {\n  Stat = W_stat == SBUB ? SAOK : W_stat;\n  registerFile.dstE = W_dstE;\n  registerFile.dstM = W_dstM;\n  registerFile.E = W_valE.slice();\n  registerFile.M = W_valM.slice();\n}\n\nfunction doControlLogic() {\n  var mispredicted_branch = E_icode == IJXX && !e_Cnd;\n  var load_use_hazard = (E_icode == IMRMOVQ || E_icode == IPOPQ) && (E_dstM == d_srcA || E_dstM == d_srcB);\n  var exception = m_stat == SADR || m_stat == SINS || m_stat == SHLT || W_stat == SADR || W_stat == SINS || W_stat == SHLT;\n  F_stall = load_use_hazard || D_icode == IRET || E_icode == IRET || M_icode == IRET;\n  F_bubble = false;\n  D_stall = load_use_hazard;\n  D_bubble = E_icode == IJXX && !e_Cnd || !((E_icode == IMRMOVQ || E_icode == IPOPQ) && (E_dstM == d_srcA || E_dstM == d_srcB)) && (D_icode == IRET || E_icode == IRET || M_icode == IRET);\n  E_stall = false;\n  E_bubble = mispredicted_branch || load_use_hazard;\n  W_stall = W_stat == SADR || W_stat == SINS || W_stat == SHLT;\n  W_bubble = false;\n  M_stall = false;\n  M_bubble = W_stat == SADR || W_stat == SINS || W_stat == SHLT || m_stat == SADR || m_stat == SINS || m_stat == SHLT;\n}\n\nfunction resetW() {\n  W_stall = false;\n  W_bubble = true;\n  W_stat = SBUB;\n  W_icode = INOP;\n  W_valE = VALZERO.slice();\n  W_valM = VALZERO.slice();\n  W_dstE = RNONE;\n  W_dstM = RNONE;\n}\n\nfunction resetM() {\n  M_stall = false;\n  M_bubble = true;\n  M_stat = SBUB;\n  M_icode = INOP;\n  M_valA = VALZERO.slice();\n  M_valE = VALZERO.slice();\n  M_dstE = RNONE;\n  M_dstM = RNONE;\n  M_Cnd = 0;\n}\n\nfunction resetE() {\n  E_stall = false;\n  E_bubble = true;\n  E_stat = SBUB;\n  E_icode = INOP;\n  E_ifun = 0;\n  E_valA = VALZERO.slice();\n  E_valB = VALZERO.slice();\n  E_valC = VALZERO.slice();\n  E_srcA = RNONE;\n  E_srcB = RNONE;\n  E_dstE = RNONE;\n  E_dstM = RNONE;\n}\n\nfunction resetD() {\n  D_stall = false;\n  D_bubble = true;\n  D_stat = SBUB;\n  D_icode = INOP;\n  D_ifun = 0;\n  D_rA = RNONE;\n  D_rB = RNONE;\n  D_valC = VALZERO.slice();\n  D_valP = VALZERO.slice();\n}\n\nfunction resetF() {\n  F_stall = false;\n  F_bubble = true;\n  F_predPC = VALZERO.slice();\n}\n\nfunction updateStageRegisters() {\n  if (W_bubble) {\n    resetW();\n  } else if (!W_stall) {\n    W_stat = m_stat;\n    W_icode = m_icode;\n    W_valE = m_valE.slice();\n    W_valM = m_valM.slice();\n    W_dstE = m_dstE;\n    W_dstM = m_dstM;\n  }\n\n  if (M_bubble) {\n    resetM();\n  } else if (!W_stall) {\n    M_stat = e_stat;\n    M_icode = e_icode;\n    M_valA = e_valA.slice();\n    M_valE = e_valE.slice();\n    M_dstE = e_dstE;\n    M_dstM = e_dstM;\n    M_Cnd = e_Cnd;\n  }\n\n  if (E_bubble) {\n    resetE();\n  } else if (!E_stall) {\n    E_stat = d_stat;\n    E_icode = d_icode;\n    E_ifun = d_ifun;\n    E_valA = d_valA.slice();\n    E_valB = d_valB.slice();\n    E_valC = d_valC.slice();\n    E_srcA = d_srcA;\n    E_srcB = d_srcB;\n    E_dstE = d_dstE;\n    E_dstM = d_dstM;\n  }\n\n  if (D_bubble) {\n    resetD();\n  } else if (!D_stall) {\n    D_stat = f_stat;\n    D_icode = f_icode;\n    D_ifun = f_ifun;\n    D_rA = f_rA;\n    D_rB = f_rB;\n    D_valC = f_valC.slice();\n    D_valP = f_valP.slice();\n  }\n\n  if (F_bubble) {\n    resetF(); //!no stat in regF\n  } else if (!F_stall) F_predPC = f_predPC;\n}\n\nfunction _init() {\n  /** reset registerFile **/\n  registerFile.reset();\n  /** reset stage registers**/\n\n  resetF();\n  resetD();\n  resetE();\n  resetM();\n  resetW();\n  /** reset Condition Code **/\n\n  CC = ZF;\n  /** reset Stat **/\n\n  Stat = SAOK;\n}\n\nfunction printStageRegisters() {\n  console.log(\"[Writeback]\");\n  console.log(\"stat[\" + W_stat + \"] icode[\" + W_icode + \"] valE[\" + W_valE + \"] valM[\" + W_valM + \"] dstE[\" + W_dstE + \"]\" + \"] dstM[\" + W_dstM + \"]\");\n  console.log(\"[Memory]\");\n  console.log(\"stat[\" + M_stat + \"]  icode[\" + M_icode + \"]  Cnd[\" + M_Cnd + \"]  valE[\" + M_valE + \"]  valA[\" + M_valA + \"]  dstE[\" + M_dstE + \"]  dstM[\" + M_dstM + \"]\");\n  console.log(\"[Execute]\");\n  console.log(\"stat[\" + E_stat + \"]  icode[\" + E_icode + \"]  ifun[\" + E_ifun + \"]  valC[\" + E_valC + \"]  valA[\" + E_valA + \"]  valB[\" + E_valB + \"]  dstE[\" + E_dstE + \"]  dstM[\" + E_dstM + \"]  srcA[\" + E_srcA + \"]  srcB[\" + E_srcB + \"]\");\n  console.log(\"[Decode]\");\n  console.log(\"stat[\" + D_stat + \"]  icode[\" + D_icode + \"]  ifun[\" + D_ifun + \"]  rA[\" + D_rA + \"]  rB[\" + D_rB + \"]  valC[\" + D_valC + \"]  valP[\" + D_valP + \"]\");\n  console.log(\"[Fetch]\");\n  console.log(\"predPC[\" + F_predPC + \"]\");\n}\n\nfunction _stepi(steps) {\n  for (var i = 0; i < steps; i++) {\n    step();\n  }\n\n  if (Stat == SINS || Stat == SADR || Stat == SHLT) {\n    return Stat;\n  }\n\n  return 0;\n}\n\nfunction step() {\n  /** Exception **/\n  if (Stat == SINS || Stat == SADR || Stat == SHLT) {\n    return 1;\n  } //console.log(\"clock cycle begins!\");\n\n  /** clock cycle begins **/\n  ///update the stage registers and registerFile\n\n\n  updateStageRegisters();\n  registerFile.write(); ///running pipeline\n\n  doWriteback();\n  doMemory();\n  doExecute();\n  doDecode();\n  doFetch(); ///update the control logic\n\n  doControlLogic();\n  /** clock cycle ends **/\n  //console.log(\"clock cycle ends\");\n  //printStageRegisters();\n  //console.log(registerFile);\n\n  return 0;\n}","map":{"version":3,"sources":["/home/lhq/Workspace/sim-cpu/src/pipe.js"],"names":["stats","icodes","regs","breakpoints","Set","Pipe","Memory","rtn","length","i","valToHex","registerFile","registers","init","clear","str","setCode","add","delete","has","stepi","time","setTimeout","func","Stat","SINS","SADR","SHLT","console","log","F_predPC","pair","MAX_MEM","x","readMemory","j","toString","push","slice","m_stat","m_icode","m_valE","m_valM","m_dstE","m_dstM","e_stat","e_icode","e_Cnd","e_valE","e_valA","e_dstE","e_dstM","d_stat","d_icode","d_ifun","d_valC","d_valA","d_valB","d_dstE","d_dstM","d_srcA","d_srcB","f_stat","f_icode","f_ifun","f_rA","f_rB","f_valC","f_valP","W_stat","W_icode","W_valE","W_valM","W_dstE","W_dstM","M_stat","M_icode","M_Cnd","M_valE","M_valA","M_dstE","M_dstM","E_stat","E_icode","E_ifun","E_valC","E_valA","E_valB","E_dstE","E_dstM","E_srcA","E_srcB","D_stat","D_icode","D_ifun","D_rA","D_rB","D_valC","D_valP","RegisterFile","A","VALZERO","B","M","E","srcA","srcB","dstM","dstE","RNONE","IHALT","INOP","IRRMOVQ","IIRMOVQ","IRMMOVQ","IMRMOVQ","IOPQ","IJXX","ICALL","IRET","IPUSHQ","IPOPQ","FNONE","RRSP","ALUADD","SAOK","SBUB","ZF","SF","OF","F_stall","F_bubble","D_stall","D_bubble","E_stall","E_bubble","M_stall","M_bubble","W_stall","W_bubble","f_predPC","f_stall","f_bubble","d_stall","d_bubble","e_stall","e_bubble","m_stall","m_bubble","imem_error","dmem_error","alu_cc","set_cc","CC","intToVal","temp","val","undefined","zero_front","parseInt","addq","valA","valB","carry","int_sum","s","str_s","subq","notB","xorq","andq","addr","bytes","writeMemory","len","code","isValid","hex_addr","isNaN","ops","a","b","ifun","rtn_sign","a_sign","b_sign","check_f_pc","check_f_instr_valid","icode","check_f_need_regids","check_f_need_valC","check_f_stat","instr_valid","check_d_srcA","check_d_srcB","check_d_dstM","check_d_dstE","check_d_valA","d_rvalA","check_d_valB","d_rvalB","check_e_aluA","valC","check_e_aluB","check_e_valE","alufun","check_e_cond","check_m_mem_addr","valE","doFetch","need_regids","need_valC","stat","pc","predPC","valP","split","align","rA","rB","doDecode","rvalA","rvalB","read","doExecute","cond","aluA","aluB","doMemory","mem_read","mem_write","data_in","valM","doWriteback","doControlLogic","mispredicted_branch","load_use_hazard","exception","resetW","resetM","resetE","resetD","resetF","updateStageRegisters","reset","printStageRegisters","steps","step","write"],"mappings":";;AAAA,IAAMA,KAAK,GAAG,CAAC,EAAD,EAAK,MAAL,EAAa,MAAb,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,MAArC,CAAd;AACA,IAAMC,MAAM,GAAG,CACb,MADa,EAEb,KAFa,EAGb,QAHa,EAIb,QAJa,EAKb,QALa,EAMb,QANa,EAOb,KAPa,EAQb,KARa,EASb,MATa,EAUb,KAVa,EAWb,OAXa,EAYb,OAZa,CAAf;AAcA,IAAMC,IAAI,GAAG,CACX,KADW,EAEX,KAFW,EAGX,KAHW,EAIX,KAJW,EAKX,KALW,EAMX,KANW,EAOX,KAPW,EAQX,KARW,EASX,IATW,EAUX,IAVW,EAWX,KAXW,EAYX,KAZW,EAaX,KAbW,EAcX,KAdW,EAeX,KAfW,EAgBX,EAhBW,CAAb;AAmBA,IAAIC,WAAW,GAAG,IAAIC,GAAJ,EAAlB;AAEA,WAAaC,IAAb;AAAA;AAAA;AACE,kBAAc;AAAA;;AACZ,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAHH;AAAA;AAAA,sCAIoB;AAChB,UAAIC,GAAG,GAAG,CAAC,EAAD,CAAV;AACAA,MAAAA,GAAG,CAACC,MAAJ,GAAa,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BF,QAAAA,GAAG,CAACE,CAAD,CAAH,GAASC,QAAQ,CAACC,YAAY,CAACC,SAAb,CAAuBH,CAAvB,CAAD,CAAjB;AACD;;AACD,aAAOF,GAAP;AACD;AAXH;AAAA;AAAA,2BAYS;AACLM,MAAAA,KAAI;;AACJV,MAAAA,WAAW,CAACW,KAAZ;AACD;AAfH;AAAA;AAAA,4BAgBUC,GAhBV,EAgBe;AACXC,MAAAA,QAAO,CAACD,GAAD,CAAP;;AACAF,MAAAA,KAAI;AACL;AAnBH;AAAA;AAAA,kCAoBgBE,GApBhB,EAoBqB;AACjBZ,MAAAA,WAAW,CAACc,GAAZ,CAAgBF,GAAhB;AACD;AAtBH;AAAA;AAAA,qCAuBmBA,GAvBnB,EAuBwB;AACpBZ,MAAAA,WAAW,CAACe,MAAZ,CAAmBH,GAAnB;AACD;AAzBH;AAAA;AAAA,kCA0BgBA,GA1BhB,EA0BqB;AACjB,aAAOZ,WAAW,CAACgB,GAAZ,CAAgBJ,GAAhB,CAAP;AACD;AA5BH;AAAA;AAAA,0BA8BQN,CA9BR,EA8BW;AACP,aAAOW,MAAK,CAACX,CAAD,CAAZ;AACD;AAhCH;AAAA;AAAA,wBAiCMY,IAjCN,EAiCY;AACRC,MAAAA,UAAU,CAAC,SAASC,IAAT,GAAgB;AACzB,YAAI,EAAEC,IAAI,IAAIC,IAAR,IAAgBD,IAAI,IAAIE,IAAxB,IAAgCF,IAAI,IAAIG,IAA1C,CAAJ,EAAqD;AACnDP,UAAAA,MAAK,CAAC,CAAD,CAAL;;AACAQ,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAP,UAAAA,UAAU,CAACC,IAAD,EAAOF,IAAP,CAAV;AACD;AACF,OANS,EAMPA,IANO,CAAV;AAOD;AAzCH;AAAA;AAAA,4BA0CU;AACN,aAAOX,QAAQ,CAACoB,QAAD,CAAf;AACD;AA5CH;AAAA;AAAA,8BA6CY;AACR,aAAON,IAAP;AACD,KA/CH,CAgDE;;AAhDF;AAAA;AAAA,gCAiDc;AACV,UAAIjB,GAAG,GAAG,EAAV;AACA,UAAIwB,IAAI,GAAG,CAAC,MAAD,EAAS,SAAT,CAAX;;AACA,WAAK,IAAItB,CAAC,GAAKuB,OAAO,GAAG,CAAX,IAAiB,CAAlB,IAAwB,CAArC,EAAwCvB,CAAC,IAAI,CAA7C,EAAgDA,CAAC,IAAI,CAArD,EAAwD;AACtD,YAAIwB,CAAC,GAAGvB,QAAQ,CAACwB,UAAU,CAACzB,CAAD,CAAX,CAAhB;;AACA,YAAIwB,CAAC,IAAI,GAAT,EAAc;AACZ,cAAIE,CAAC,GAAG1B,CAAC,IAAI,CAAb;AACAsB,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUtB,CAAC,CAAC2B,QAAF,CAAW,EAAX,CAAV;AACAL,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,CAAV;AACA1B,UAAAA,GAAG,CAAC8B,IAAJ,CAASN,IAAI,CAACO,KAAL,EAAT;AACD;AACF;;AACD,aAAO/B,GAAP;AACD;AA9DH;AAAA;AAAA,qCA+DmB;AACf,aAAO,CACL,CACE,CAAC,QAAD,EAAWP,KAAK,CAACuC,MAAD,CAAhB,CADF,EAEE,CAAC,SAAD,EAAYtC,MAAM,CAACuC,OAAD,CAAlB,CAFF,EAGE,CAAC,QAAD,EAAW9B,QAAQ,CAAC+B,MAAD,CAAnB,CAHF,EAIE,CAAC,QAAD,EAAW/B,QAAQ,CAACgC,MAAD,CAAnB,CAJF,EAKE,CAAC,QAAD,EAAWxC,IAAI,CAACyC,MAAD,CAAf,CALF,EAME,CAAC,QAAD,EAAWzC,IAAI,CAAC0C,MAAD,CAAf,CANF,CADK,EASL,CACE,CAAC,QAAD,EAAW5C,KAAK,CAAC6C,MAAD,CAAhB,CADF,EAEE,CAAC,UAAD,EAAa5C,MAAM,CAAC6C,OAAD,CAAnB,CAFF,EAGE,CAAC,OAAD,EAAUC,KAAK,GAAG,GAAH,GAAS,GAAxB,CAHF,EAIE,CAAC,QAAD,EAAWrC,QAAQ,CAACsC,MAAD,CAAnB,CAJF,EAKE,CAAC,QAAD,EAAWtC,QAAQ,CAACuC,MAAD,CAAnB,CALF,EAME,CAAC,QAAD,EAAW/C,IAAI,CAACgD,MAAD,CAAf,CANF,EAOE,CAAC,QAAD,EAAWhD,IAAI,CAACiD,MAAD,CAAf,CAPF,CATK,EAkBL,CACE,CAAC,QAAD,EAAWnD,KAAK,CAACoD,MAAD,CAAhB,CADF,EAEE,CAAC,SAAD,EAAYnD,MAAM,CAACoD,OAAD,CAAlB,CAFF,EAGE,CAAC,QAAD,EAAW,KAAKC,MAAhB,CAHF,EAIE,CAAC,QAAD,EAAW5C,QAAQ,CAAC6C,MAAD,CAAnB,CAJF,EAKE,CAAC,QAAD,EAAW7C,QAAQ,CAAC8C,MAAD,CAAnB,CALF,EAME,CAAC,QAAD,EAAW9C,QAAQ,CAAC+C,MAAD,CAAnB,CANF,EAOE,CAAC,QAAD,EAAWvD,IAAI,CAACwD,MAAD,CAAf,CAPF,EAQE,CAAC,QAAD,EAAWxD,IAAI,CAACyD,MAAD,CAAf,CARF,EASE,CAAC,QAAD,EAAWzD,IAAI,CAAC0D,MAAD,CAAf,CATF,EAUE,CAAC,QAAD,EAAW1D,IAAI,CAAC2D,MAAD,CAAf,CAVF,CAlBK,EA8BL,CACE,CAAC,QAAD,EAAW7D,KAAK,CAAC8D,MAAD,CAAhB,CADF,EAEE,CAAC,SAAD,EAAY7D,MAAM,CAAC8D,OAAD,CAAlB,CAFF,EAGE,CAAC,QAAD,EAAW,KAAKC,MAAhB,CAHF,EAIE,CAAC,MAAD,EAAS9D,IAAI,CAAC+D,IAAD,CAAb,CAJF,EAKE,CAAC,MAAD,EAAS/D,IAAI,CAACgE,IAAD,CAAb,CALF,EAME,CAAC,QAAD,EAAWxD,QAAQ,CAACyD,MAAD,CAAnB,CANF,EAOE,CAAC,QAAD,EAAWzD,QAAQ,CAAC0D,MAAD,CAAnB,CAPF,CA9BK,EAuCL,CAAC,CAAC,QAAD,EAAW1D,QAAQ,CAACoB,QAAD,CAAnB,CAAD,CAvCK,CAAP;AAyCD;AAzGH;AAAA;AAAA,wCA2GsB;AAClB,aAAO,CACL,CACE,CAAC,MAAD,EAAS9B,KAAK,CAACqE,MAAD,CAAd,CADF,EAEE,CAAC,OAAD,EAAUpE,MAAM,CAACqE,OAAD,CAAhB,CAFF,EAGE,CAAC,MAAD,EAAS5D,QAAQ,CAAC6D,MAAD,CAAjB,CAHF,EAIE,CAAC,MAAD,EAAS7D,QAAQ,CAAC8D,MAAD,CAAjB,CAJF,EAKE,CAAC,MAAD,EAAStE,IAAI,CAACuE,MAAD,CAAb,CALF,EAME,CAAC,MAAD,EAASvE,IAAI,CAACwE,MAAD,CAAb,CANF,CADK,EASL,CACE,CAAC,MAAD,EAAS1E,KAAK,CAAC2E,MAAD,CAAd,CADF,EAEE,CAAC,QAAD,EAAW1E,MAAM,CAAC2E,OAAD,CAAjB,CAFF,EAGE,CAAC,KAAD,EAAQC,KAAK,GAAG,GAAH,GAAS,GAAtB,CAHF,EAIE,CAAC,MAAD,EAASnE,QAAQ,CAACoE,MAAD,CAAjB,CAJF,EAKE,CAAC,MAAD,EAASpE,QAAQ,CAACqE,MAAD,CAAjB,CALF,EAME,CAAC,MAAD,EAAS7E,IAAI,CAAC8E,MAAD,CAAb,CANF,EAOE,CAAC,MAAD,EAAS9E,IAAI,CAAC+E,MAAD,CAAb,CAPF,CATK,EAkBL,CACE,CAAC,MAAD,EAASjF,KAAK,CAACkF,MAAD,CAAd,CADF,EAEE,CAAC,OAAD,EAAUjF,MAAM,CAACkF,OAAD,CAAhB,CAFF,EAGE,CAAC,MAAD,EAAS,KAAKC,MAAd,CAHF,EAIE,CAAC,MAAD,EAAS1E,QAAQ,CAAC2E,MAAD,CAAjB,CAJF,EAKE,CAAC,MAAD,EAAS3E,QAAQ,CAAC4E,MAAD,CAAjB,CALF,EAME,CAAC,MAAD,EAAS5E,QAAQ,CAAC6E,MAAD,CAAjB,CANF,EAOE,CAAC,MAAD,EAASrF,IAAI,CAACsF,MAAD,CAAb,CAPF,EAQE,CAAC,MAAD,EAAStF,IAAI,CAACuF,MAAD,CAAb,CARF,EASE,CAAC,MAAD,EAASvF,IAAI,CAACwF,MAAD,CAAb,CATF,EAUE,CAAC,MAAD,EAASxF,IAAI,CAACyF,MAAD,CAAb,CAVF,CAlBK,EA8BL,CACE,CAAC,MAAD,EAAS3F,KAAK,CAAC4F,MAAD,CAAd,CADF,EAEE,CAAC,OAAD,EAAU3F,MAAM,CAAC4F,OAAD,CAAhB,CAFF,EAGE,CAAC,MAAD,EAAS,KAAKC,MAAd,CAHF,EAIE,CAAC,IAAD,EAAO5F,IAAI,CAAC6F,IAAD,CAAX,CAJF,EAKE,CAAC,IAAD,EAAO7F,IAAI,CAAC8F,IAAD,CAAX,CALF,EAME,CAAC,MAAD,EAAStF,QAAQ,CAACuF,MAAD,CAAjB,CANF,EAOE,CAAC,MAAD,EAASvF,QAAQ,CAACwF,MAAD,CAAjB,CAPF,CA9BK,EAuCL,CAAC,CAAC,QAAD,EAAWxF,QAAQ,CAACoB,QAAD,CAAnB,CAAD,CAvCK,CAAP;AAyCD;AArJH;;AAAA;AAAA;AAwJA;;IACMqE,Y;;;AACJ,0BAAc;AAAA;;AACZ,SAAKC,CAAL,GAASC,OAAO,CAAC/D,KAAR,EAAT;AACA,SAAKgE,CAAL,GAASD,OAAO,CAAC/D,KAAR,EAAT;AACA,SAAKiE,CAAL,GAASF,OAAO,CAAC/D,KAAR,EAAT;AACA,SAAKkE,CAAL,GAASH,OAAO,CAAC/D,KAAR,EAAT;AACA;;;;;AAIA,SAAKmE,IAAL,GAAY,KAAKC,IAAL,GAAY,KAAKC,IAAL,GAAY,KAAKC,IAAL,GAAYC,KAAhD;AACA,SAAKjG,SAAL,GAAiB,CAACyF,OAAO,CAAC/D,KAAR,EAAD,CAAjB;AACA,SAAK1B,SAAL,CAAeJ,MAAf,GAAwB,EAAxB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB;AAA6B,WAAKG,SAAL,CAAeH,CAAf,IAAoB,KAAK2F,CAAzB;AAA7B;;AACAxE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjB,SAAjB;AACD;;;;4BACO;AACN,WAAKwF,CAAL,GAASC,OAAO,CAAC/D,KAAR,EAAT;AACA,WAAKgE,CAAL,GAASD,OAAO,CAAC/D,KAAR,EAAT;AACA,WAAKiE,CAAL,GAASF,OAAO,CAAC/D,KAAR,EAAT;AACA,WAAKkE,CAAL,GAASH,OAAO,CAAC/D,KAAR,EAAT;;AACA,WAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB;AAA6B,aAAKG,SAAL,CAAeH,CAAf,IAAoB4F,OAAO,CAAC/D,KAAR,EAApB;AAA7B;;AACA,WAAKmE,IAAL,GAAY,KAAKC,IAAL,GAAY,KAAKC,IAAL,GAAY,KAAKC,IAAL,GAAYC,KAAhD;AACD;;;2BACM;AACL,WAAKT,CAAL,GAAS,KAAKxF,SAAL,CAAe,KAAK6F,IAApB,EAA0BnE,KAA1B,EAAT;AACA,WAAKgE,CAAL,GAAS,KAAK1F,SAAL,CAAe,KAAK8F,IAApB,EAA0BpE,KAA1B,EAAT;AACD;;;4BACO;AACN;AAEA,WAAK1B,SAAL,CAAe,KAAKgG,IAApB,IAA4B,KAAKJ,CAAL,CAAOlE,KAAP,EAA5B;AACA,WAAK1B,SAAL,CAAe,KAAK+F,IAApB,IAA4B,KAAKJ,CAAL,CAAOjE,KAAP,EAA5B;AACD;;;;;AAGH;;;AAEA,IAAMN,OAAO,GAAG,GAAhB;AAEA,IAAM8E,KAAK,GAAG,CAAd;AAAA,IACEC,IAAI,GAAG,CADT;AAAA,IAEEC,OAAO,GAAG,CAFZ;AAAA,IAGEC,OAAO,GAAG,CAHZ;AAAA,IAIEC,OAAO,GAAG,CAJZ;AAAA,IAKEC,OAAO,GAAG,CALZ;AAAA,IAMEC,IAAI,GAAG,CANT;AAAA,IAOEC,IAAI,GAAG,CAPT;AAAA,IAQEC,KAAK,GAAG,CARV;AAAA,IASEC,IAAI,GAAG,CATT;AAAA,IAUEC,MAAM,GAAG,EAVX;AAAA,IAWEC,KAAK,GAAG,EAXV;AAYA,IAAMC,KAAK,GAAG,CAAd;AACA,IAAMb,KAAK,GAAG,EAAd;AAAA,IACEc,IAAI,GAAG,CADT;AAEA,IAAMC,MAAM,GAAG,CAAf;AACA,IAAMC,IAAI,GAAG,CAAb;AAAA,IACEnG,IAAI,GAAG,CADT;AAAA,IAEED,IAAI,GAAG,CAFT;AAAA,IAGEE,IAAI,GAAG,CAHT;AAAA,IAIEmG,IAAI,GAAG,CAJT;AAKA,IAAMC,EAAE,GAAG,CAAX;AAAA,IACEC,EAAE,GAAG,CADP;AAAA,IAEEC,EAAE,GAAG,CAFP;AAIA,IAAM5B,OAAO,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAAhB;AAEA;;AACA,IAAIvE,QAAQ,GAAGuE,OAAO,CAAC/D,KAAR,EAAf;AAAA,IACE4F,OADF;AAAA,IAEEC,QAFF;AAGA,IAAIvC,MAAJ,EAAYC,OAAZ,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyCC,MAAzC,EAAiDC,MAAjD,EAAyDkC,OAAzD,EAAkEC,QAAlE;AACA,IAAInD,MAAJ,EACEC,OADF,EAEEC,MAFF,EAGEI,MAHF,EAIEC,MAJF,EAKEC,MALF,EAMEC,MANF,EAOEL,MAPF,EAQEC,MARF,EASEF,MATF,EAUEiD,OAVF,EAWEC,QAXF;AAYA,IAAI5D,MAAJ,EAAYC,OAAZ,EAAqBC,KAArB,EAA4BG,MAA5B,EAAoCC,MAApC,EAA4CF,MAA5C,EAAoDD,MAApD,EAA4D0D,OAA5D,EAAqEC,QAArE;AACA,IAAIpE,MAAJ,EAAYC,OAAZ,EAAqBG,MAArB,EAA6BC,MAA7B,EAAqCF,MAArC,EAA6CD,MAA7C,EAAqDmE,OAArD,EAA8DC,QAA9D;AAEA;;AACA,IAAIC,QAAJ,EACE9E,MADF,EAEEC,OAFF,EAGEC,MAHF,EAIEC,IAJF,EAKEC,IALF,EAMEC,MANF,EAOEC,MAPF,EAQEyE,OARF,EASEC,QATF;AAUA,IAAI1F,MAAJ,EACEC,OADF,EAEEC,MAFF,EAGEE,MAHF,EAIEC,MAJF,EAKEF,MALF,EAMEG,MANF,EAOEC,MAPF,EAQEC,MARF,EASEC,MATF,EAUEkF,OAVF,EAWEC,QAXF;AAYA,IAAInG,MAAJ,EAAYC,OAAZ,EAAqBC,KAArB,EAA4BG,MAA5B,EAAoCC,MAApC,EAA4CF,MAA5C,EAAoDD,MAApD,EAA4DiG,OAA5D,EAAqEC,QAArE;AACA,IAAI3G,MAAJ,EAAYC,OAAZ,EAAqBG,MAArB,EAA6BC,MAA7B,EAAqCF,MAArC,EAA6CD,MAA7C,EAAqD0G,OAArD,EAA8DC,QAA9D;AAEA,IAAIC,UAAJ,EAAgBC,UAAhB;AACA,IAAIhJ,MAAM,GAAG,CAAC,GAAD,CAAb;AACAA,MAAM,CAACE,MAAP,GAAgBwB,OAAhB;AAEA,IAAIrB,YAAY,GAAG,IAAIwF,YAAJ,EAAnB;AAEA,IAAIoD,MAAJ;AACA,IAAIC,MAAJ;AACA,IAAIC,EAAJ;AACA,IAAIjI,IAAJ,C,CAEA;AAEA;;AACA,SAASkI,QAAT,CAAkBzH,CAAlB,EAAqB;AACnB,MAAI1B,GAAG,GAAG8F,OAAO,CAAC/D,KAAR,EAAV;AACA/B,EAAAA,GAAG,CAACC,MAAJ,GAAa,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,QAAIkJ,IAAI,GAAG1H,CAAC,GAAG,IAAf;AACA1B,IAAAA,GAAG,CAACE,CAAD,CAAH,GAASkJ,IAAI,CAACvH,QAAL,CAAc,EAAd,CAAT;AACA,QAAI7B,GAAG,CAACE,CAAD,CAAH,CAAOD,MAAP,IAAiB,CAArB,EAAwBD,GAAG,CAACE,CAAD,CAAH,GAAS,MAAMF,GAAG,CAACE,CAAD,CAAlB;AACxBwB,IAAAA,CAAC,KAAK,CAAN;AACD;;AACD,SAAO1B,GAAP;AACD;AACD;;;AACA,SAASG,QAAT,CAAkBkJ,GAAlB,EAAuB;AACrB,MAAIA,GAAG,IAAIC,SAAX,EAAsB,OAAO,GAAP;AACtB,MAAItJ,GAAG,GAAG,EAAV;AACA,MAAIuJ,UAAU,GAAG,IAAjB;AACA,MAAIrJ,CAAC,GAAG,CAAR;;AAEA,SAAOA,CAAC,IAAI,CAAL,IAAUsJ,QAAQ,CAACH,GAAG,CAACnJ,CAAD,CAAJ,EAAS,EAAT,CAAR,IAAwB,CAAzC,EAA4C;AAC1CA,IAAAA,CAAC;AACF;;AACD,MAAIA,CAAC,GAAG,CAAR,EAAW,OAAO,GAAP;AACX,MAAImJ,GAAG,CAACnJ,CAAD,CAAH,CAAO,CAAP,KAAa,GAAjB,EAAsBF,GAAG,IAAIqJ,GAAG,CAACnJ,CAAD,CAAH,CAAO,CAAP,CAAP;AACtBF,EAAAA,GAAG,IAAIqJ,GAAG,CAACnJ,CAAD,CAAH,CAAO,CAAP,CAAP;;AACA,OAAK,IAAI0B,CAAC,GAAG1B,CAAC,GAAG,CAAjB,EAAoB0B,CAAC,IAAI,CAAzB,EAA4BA,CAAC,EAA7B,EAAiC;AAC/B5B,IAAAA,GAAG,IAAIqJ,GAAG,CAACzH,CAAD,CAAH,CAAO,CAAP,IAAYyH,GAAG,CAACzH,CAAD,CAAH,CAAO,CAAP,CAAnB;AACD;;AACD,SAAO5B,GAAP;AACD,C,CACD;;;AACA,SAASyJ,IAAT,CAAcC,IAAd,EAAoBC,IAApB,EAA0B;AACxB,MAAI3J,GAAG,GAAG8F,OAAO,CAAC/D,KAAR,EAAV;AACA/B,EAAAA,GAAG,CAACC,MAAJ,GAAa,CAAb;AACA,MAAI2J,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAI1J,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,QAAI2J,OAAO,GAAGL,QAAQ,CAACE,IAAI,CAACxJ,CAAD,CAAL,EAAU,EAAV,CAAR,GAAwBsJ,QAAQ,CAACG,IAAI,CAACzJ,CAAD,CAAL,EAAU,EAAV,CAAhC,GAAgD0J,KAA9D;AACAA,IAAAA,KAAK,GAAGC,OAAO,IAAI,CAAnB;AACA,QAAIC,CAAC,GAAGD,OAAO,GAAG,IAAlB;AACA,QAAIE,KAAK,GAAGD,CAAC,CAACjI,QAAF,CAAW,EAAX,CAAZ;AACA,QAAIkI,KAAK,CAAC9J,MAAN,IAAgB,CAApB,EAAuBD,GAAG,CAACE,CAAD,CAAH,GAAS,MAAM6J,KAAf,CAAvB,KACK/J,GAAG,CAACE,CAAD,CAAH,GAAS6J,KAAT;AACN,GAXuB,CAYxB;AACA;;;AAEA,SAAO/J,GAAP;AACD;;AACD,SAASgK,IAAT,CAAcN,IAAd,EAAoBC,IAApB,EAA0B;AACxB,MAAI3J,GAAG,GAAG8F,OAAO,CAAC/D,KAAR,EAAV;AACA,MAAIkI,IAAI,GAAGC,IAAI,CAACP,IAAD,EAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAAP,CAAf;AACA,SAAOF,IAAI,CACTC,IADS,EAETD,IAAI,CAACQ,IAAD,EAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAAP,CAFK,CAAX;AAID;;AACD,SAASE,IAAT,CAAcT,IAAd,EAAoBC,IAApB,EAA0B;AACxB,MAAI3J,GAAG,GAAG8F,OAAO,CAAC/D,KAAR,EAAV;AACA/B,EAAAA,GAAG,CAACC,MAAJ,GAAa,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,QAAI4J,CAAC,GAAGN,QAAQ,CAACE,IAAI,CAACxJ,CAAD,CAAL,EAAU,EAAV,CAAR,GAAwBsJ,QAAQ,CAACG,IAAI,CAACzJ,CAAD,CAAL,EAAU,EAAV,CAAhC,GAAgD,IAAxD;AACAF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAAS4J,CAAC,CAACjI,QAAF,CAAW,EAAX,CAAT;AACA,QAAI7B,GAAG,CAACE,CAAD,CAAH,CAAOD,MAAP,IAAiB,CAArB,EAAwBD,GAAG,CAACE,CAAD,CAAH,GAAS,MAAMF,GAAG,CAACE,CAAD,CAAlB;AACzB;;AACD,SAAOF,GAAP;AACD;;AACD,SAASkK,IAAT,CAAcR,IAAd,EAAoBC,IAApB,EAA0B;AACxB,MAAI3J,GAAG,GAAG8F,OAAO,CAAC/D,KAAR,EAAV;AACA/B,EAAAA,GAAG,CAACC,MAAJ,GAAa,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,QAAI4J,CAAC,GAAG,CAACN,QAAQ,CAACE,IAAI,CAACxJ,CAAD,CAAL,EAAU,EAAV,CAAR,GAAwBsJ,QAAQ,CAACG,IAAI,CAACzJ,CAAD,CAAL,EAAU,EAAV,CAAjC,IAAkD,IAA1D;AACAF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAAS4J,CAAC,CAACjI,QAAF,CAAW,EAAX,CAAT;AACA,QAAI7B,GAAG,CAACE,CAAD,CAAH,CAAOD,MAAP,IAAiB,CAArB,EAAwBD,GAAG,CAACE,CAAD,CAAH,GAAS,MAAMF,GAAG,CAACE,CAAD,CAAlB;AACzB;;AACD,SAAOF,GAAP;AACD;AAED;;AACA;;;AACA,SAAS2B,UAAT,CAAoByI,IAApB,EAAqC;AAAA,MAAXC,KAAW,uEAAH,CAAG;;AACnC,MAAID,IAAI,GAAGC,KAAP,GAAe5I,OAAf,IAA0B2I,IAAI,GAAG,CAArC,EAAwC;AACtC,WAAO,IAAP;AACD;;AACD,MAAIpK,GAAG,GAAG8F,OAAO,CAAC/D,KAAR,EAAV;AACA/B,EAAAA,GAAG,CAACC,MAAJ,GAAaoK,KAAb;;AACA,OAAK,IAAInK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmK,KAApB,EAA2BnK,CAAC,EAA5B,EAAgC;AAC9BF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAASH,MAAM,CAACqK,IAAI,GAAGlK,CAAR,CAAf;AACA,QAAIF,GAAG,CAACE,CAAD,CAAH,IAAUoJ,SAAd,EAAyBtJ,GAAG,CAACE,CAAD,CAAH,GAAS,IAAT;AAC1B;;AACD,SAAOF,GAAP;AACD;AACD;;;AACA,SAASsK,WAAT,CAAqBF,IAArB,EAA2Bf,GAA3B,EAAgC;AAC9B,MAAIkB,GAAG,GAAGlB,GAAG,CAACpJ,MAAd;AACA,MAAImK,IAAI,GAAGG,GAAP,GAAa9I,OAAb,IAAwB2I,IAAI,GAAG,CAAnC,EAAsC,OAAO,IAAP;;AACtC,OAAK,IAAIlK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqK,GAApB,EAAyBrK,CAAC,EAA1B,EAA8B;AAC5BH,IAAAA,MAAM,CAACqK,IAAI,GAAGlK,CAAR,CAAN,GAAmBmJ,GAAG,CAACnJ,CAAD,CAAtB;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASO,QAAT,CAAiB+J,IAAjB,EAAuB;AACrB,MAAIC,OAAO,GAAG,IAAd;;AACA,OAAK,IAAIvK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsK,IAAI,CAACvK,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,QAAIsK,IAAI,CAACtK,CAAD,CAAJ,IAAW,IAAf,EAAqB;AACnBuK,MAAAA,OAAO,GAAG,IAAV;AACA;AACD;;AACD,QACEA,OAAO,IACPvK,CAAC,GAAG,CAAJ,GAAQsK,IAAI,CAACvK,MADb,IAEAuK,IAAI,CAACtK,CAAD,CAAJ,IAAW,GAFX,IAGAsK,IAAI,CAACtK,CAAC,GAAG,CAAL,CAAJ,IAAe,GAJjB,EAKE;AACAuK,MAAAA,OAAO,GAAG,KAAV;AAEA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIN,IAAI,SAAR;AACAlK,MAAAA,CAAC,GALD,CAMA;;AACA,aAAOsK,IAAI,CAAC,EAAEtK,CAAH,CAAJ,IAAa,GAApB,EAAyB,CAAE;;AAC3B,aAAOsK,IAAI,CAACtK,CAAD,CAAJ,IAAW,GAAlB;AAAuBwK,QAAAA,QAAQ,IAAIF,IAAI,CAACtK,CAAC,EAAF,CAAhB;AAAvB;;AACAkK,MAAAA,IAAI,GAAGZ,QAAQ,CAACkB,QAAD,EAAW,EAAX,CAAf;;AACA,UAAIC,KAAK,CAACP,IAAD,CAAT,EAAiB;AACfA,QAAAA,IAAI,GAAG,CAAP;AACD;;AACDlK,MAAAA,CAAC,IAAI,CAAL;AACA,UAAI0B,CAAC,SAAL;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAY1B,CAAC,GAAG0B,CAAJ,GAAQ4I,IAAI,CAACvK,MAAb,IAAuBuK,IAAI,CAACtK,CAAC,GAAG0B,CAAL,CAAJ,IAAe,GAAlD,EAAuDA,CAAC,GAAGA,CAAC,GAAG,CAA/D,EAAkE;AAChE7B,QAAAA,MAAM,CAACqK,IAAI,IAAIxI,CAAC,IAAI,CAAT,CAAL,CAAN,GAA0B4I,IAAI,CAACtK,CAAC,GAAG0B,CAAL,CAA9B;AACA7B,QAAAA,MAAM,CAACqK,IAAI,IAAIxI,CAAC,IAAI,CAAT,CAAL,CAAN,IAA2B4I,IAAI,CAACtK,CAAC,GAAG0B,CAAJ,GAAQ,CAAT,CAA/B;AACD;;AACD1B,MAAAA,CAAC,IAAI0B,CAAC,GAAG,CAAT;AACD,KAzBD,MAyBO6I,OAAO,GAAG,KAAV;AACR;AACF;;AAED,SAASG,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,IAAnB,EAAyB;AACvB,MAAI/K,GAAJ;;AACA,UAAQ+K,IAAR;AACE,SAAK,CAAL;AACE/K,MAAAA,GAAG,GAAGyJ,IAAI,CAACoB,CAAD,EAAIC,CAAJ,CAAV;AACA;;AACF,SAAK,CAAL;AACE9K,MAAAA,GAAG,GAAGgK,IAAI,CAACa,CAAD,EAAIC,CAAJ,CAAV;AACA;;AACF,SAAK,CAAL;AACE9K,MAAAA,GAAG,GAAGmK,IAAI,CAACU,CAAD,EAAIC,CAAJ,CAAV;AACA;;AACF,SAAK,CAAL;AACE9K,MAAAA,GAAG,GAAGkK,IAAI,CAACW,CAAD,EAAIC,CAAJ,CAAV;AACA;;AACF;AACE9K,MAAAA,GAAG,GAAG,IAAN;AACA;AAfJ;;AAiBA,MAAIgL,QAAQ,GAAGxB,QAAQ,CAACxJ,GAAG,CAAC,CAAD,CAAJ,EAAS,EAAT,CAAR,IAAwB,CAAvC;AACA,MAAIiL,MAAM,GAAGzB,QAAQ,CAACqB,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAR,IAAsB,CAAnC;AACA,MAAIK,MAAM,GAAG1B,QAAQ,CAACsB,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAR,IAAsB,CAAnC;AACA9B,EAAAA,MAAM,GAAG,CAAT;AACA,MAAIQ,QAAQ,CAACrJ,QAAQ,CAACH,GAAD,CAAT,EAAgB,EAAhB,CAAR,IAA+B,CAAnC,EAAsCgJ,MAAM,IAAIxB,EAAV;AACtC,MAAIwD,QAAQ,IAAI,CAAhB,EAAmBhC,MAAM,IAAIvB,EAAV;AACnB,MAAIwD,MAAM,IAAIC,MAAV,IAAoBF,QAAQ,IAAIC,MAApC,EAA4CjC,MAAM,IAAItB,EAAV;AAE5C,SAAO1H,GAAP;AACD;AAED;;;AACA,SAASmL,UAAT,GAAsB;AACpB;AACA,MAAI9G,OAAO,IAAIyC,IAAX,IAAmB,CAACxC,KAAxB,EAA+B,OAAOE,MAAP,CAA/B,CACA;AADA,OAEK,IAAIT,OAAO,IAAIiD,IAAf,EAAqB,OAAO/C,MAAP,CAArB,CACL;AADK,SAEA,OAAO1C,QAAP;AACN,C,CACD;;;AACA,SAAS6J,mBAAT,CAA6BC,KAA7B,EAAoCN,IAApC,EAA0C;AACxC,UAAQM,KAAR;AACE,SAAKvE,IAAL;AACA,SAAKL,OAAL;AACE,aAAOsE,IAAI,GAAG,CAAd;;AACF,SAAKlE,IAAL;AACE,aAAOkE,IAAI,GAAG,CAAd;;AACF;AACE,aAAOA,IAAI,GAAG,CAAd;AAPJ;AASD,C,CACD;;;AACA,SAASO,mBAAT,CAA6BD,KAA7B,EAAoC;AAClC,UAAQA,KAAR;AACE,SAAK9E,KAAL;AACA,SAAKC,IAAL;AACA,SAAKM,IAAL;AACA,SAAKC,KAAL;AACA,SAAKC,IAAL;AACE,aAAO,KAAP;;AACF;AACE,aAAO,IAAP;AARJ;AAUD,C,CACD;;;AACA,SAASuE,iBAAT,CAA2BF,KAA3B,EAAkC;AAChC,UAAQA,KAAR;AACE,SAAK3E,OAAL;AACA,SAAKC,OAAL;AACA,SAAKC,OAAL;AACA,SAAKE,IAAL;AACA,SAAKC,KAAL;AACE,aAAO,IAAP;;AACF;AACE,aAAO,KAAP;AARJ;AAUD,C,CACD;;;AACA,SAASyE,YAAT,CAAsB1C,UAAtB,EAAkC2C,WAAlC,EAA+CJ,KAA/C,EAAsD;AACpD,MAAIvC,UAAU,IAAI,IAAlB,EAAwB,OAAO3H,IAAP,CAAxB,KACK,IAAI,CAACsK,WAAD,IAAgB,IAApB,EAA0B,OAAOvK,IAAP,CAA1B,KACA,IAAImK,KAAK,IAAI9E,KAAb,EAAoB,OAAOnF,IAAP,CAApB,KACA,OAAOkG,IAAP;AACN,C,CACD;;;AACA,SAASoE,YAAT,GAAwB;AACtB,UAAQpG,OAAR;AACE,SAAKmB,OAAL;AACA,SAAKE,OAAL;AACA,SAAKE,IAAL;AACA,SAAKI,MAAL;AACE,aAAOzB,IAAP;;AACF,SAAK0B,KAAL;AACA,SAAKF,IAAL;AACE,aAAOI,IAAP;;AACF;AACE,aAAOd,KAAP;AAVJ;AAYD,C,CAED;;;AACA,SAASqF,YAAT,GAAwB;AACtB,UAAQrG,OAAR;AACE,SAAKsB,OAAL;AACA,SAAKD,OAAL;AACA,SAAKE,IAAL;AACE,aAAOpB,IAAP;;AAEF,SAAKwB,MAAL;AACA,SAAKC,KAAL;AACA,SAAKH,KAAL;AACA,SAAKC,IAAL;AACE,aAAOI,IAAP;;AACF;AACE,aAAOd,KAAP;AAZJ;AAcD,C,CACD;;;AACA,SAASsF,YAAT,GAAwB;AACtB,UAAQtG,OAAR;AACE,SAAKsB,OAAL;AACA,SAAKM,KAAL;AACE,aAAO1B,IAAP;;AACF;AACE,aAAOc,KAAP;AALJ;AAOD,C,CACD;;;AACA,SAASuF,YAAT,GAAwB;AACtB,UAAQvG,OAAR;AACE,SAAKmB,OAAL,CADF,CACgB;;AACd,SAAKC,OAAL;AACA,SAAKG,IAAL;AACE,aAAOpB,IAAP;;AACF,SAAKwB,MAAL;AACA,SAAKC,KAAL;AACA,SAAKH,KAAL;AACA,SAAKC,IAAL;AACE,aAAOI,IAAP;;AACF;AACE,aAAOd,KAAP;AAXJ;AAaD,C,CACD;;;AACA,SAASwF,YAAT,CAAsBzI,MAAtB,EAA8B0I,OAA9B,EAAuC;AACrC,MAAIzG,OAAO,IAAIyB,KAAX,IAAoBzB,OAAO,IAAIwB,IAAnC,EAAyC;AACvC,WAAOnB,MAAP;AACD,GAFD,MAEO,IAAItC,MAAM,IAAIV,MAAd,EAAsB;AAC3B,WAAOF,MAAP;AACD,GAFM,MAEA,IAAIY,MAAM,IAAIqB,MAAd,EAAsB;AAC3B,WAAOvC,MAAP;AACD,GAFM,MAEA,IAAIkB,MAAM,IAAIoB,MAAd,EAAsB;AAC3B,WAAOF,MAAP;AACD,GAFM,MAEA,IAAIlB,MAAM,IAAIc,MAAd,EAAsB;AAC3B,WAAOF,MAAP;AACD,GAFM,MAEA,IAAIZ,MAAM,IAAIa,MAAd,EAAsB;AAC3B,WAAOF,MAAP;AACD,GAFM,MAEA,OAAO+H,OAAP;AACR,C,CAED;;;AACA,SAASC,YAAT,CAAsB1I,MAAtB,EAA8B2I,OAA9B,EAAuC;AACrC,MAAI3I,MAAM,IAAIX,MAAd,EAAsB;AACpB,WAAOF,MAAP;AACD,GAFD,MAEO,IAAIa,MAAM,IAAIoB,MAAd,EAAsB;AAC3B,WAAOvC,MAAP;AACD,GAFM,MAEA,IAAImB,MAAM,IAAImB,MAAd,EAAsB;AAC3B,WAAOF,MAAP;AACD,GAFM,MAEA,IAAIjB,MAAM,IAAIa,MAAd,EAAsB;AAC3B,WAAOF,MAAP;AACD,GAFM,MAEA,IAAIX,MAAM,IAAIY,MAAd,EAAsB;AAC3B,WAAOF,MAAP;AACD,GAFM,MAEA,OAAOiI,OAAP;AACR,C,CAED;;;AACA,SAASC,YAAT,CAAsBb,KAAtB,EAA6B3B,IAA7B,EAAmCyC,IAAnC,EAAyC;AACvC,UAAQd,KAAR;AACE,SAAK5E,OAAL;AACA,SAAKI,IAAL;AACE,aAAO6C,IAAP;;AAEF,SAAKhD,OAAL;AACA,SAAKC,OAAL;AACA,SAAKC,OAAL;AACE,aAAOuF,IAAP;;AAEF,SAAKpF,KAAL;AACA,SAAKE,MAAL;AACE,aAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAAP;AACF;;AAEA,SAAKD,IAAL;AACA,SAAKE,KAAL;AACE,aAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAAP;AACF;;AACA;AACE,aAAOpB,OAAP;AApBJ;AAsBD,C,CACD;;;AACA,SAASsG,YAAT,CAAsBf,KAAtB,EAA6B1B,IAA7B,EAAmCwC,IAAnC,EAAyC;AACvC,UAAQd,KAAR;AACE,SAAK1E,OAAL;AACA,SAAKC,OAAL;AACA,SAAKC,IAAL;AACA,SAAKE,KAAL;AACA,SAAKE,MAAL;AACA,SAAKD,IAAL;AACA,SAAKE,KAAL;AACE,aAAOyC,IAAP;;AAEF,SAAKlD,OAAL;AACA,SAAKC,OAAL;AACE,aAAOZ,OAAP;AACF;;AACA;AACE,aAAOA,OAAP;AAfJ;AAiBD,C,CACD;AACA;;;AACA,SAASuG,YAAT,CAAsBC,MAAtB,EAA8B5C,IAA9B,EAAoCC,IAApC,EAA0C;AACxC,SAAOiB,GAAG,CAAClB,IAAD,EAAOC,IAAP,EAAa2C,MAAb,CAAV;AACD,C,CAED;;AACA;;;AACA,SAASC,YAAT,CAAsBxB,IAAtB,EAA4B;AAC1B,UAAQA,IAAR;AACE,SAAK,CAAL;AACE,aAAO7B,EAAE,IAAI1B,EAAE,GAAGC,EAAT,CAAT;;AACF,SAAK,CAAL;AACE,aAAOyB,EAAE,GAAGzB,EAAZ;;AACF,SAAK,CAAL;AACE,aAAOyB,EAAE,GAAG1B,EAAZ;;AACF,SAAK,CAAL;AACE,aAAO,EAAE0B,EAAE,GAAG1B,EAAP,CAAP;;AACF,SAAK,CAAL;AACE,aAAO,EAAE0B,EAAE,GAAGzB,EAAP,CAAP;;AACF,SAAK,CAAL;AACE,aAAO,EAAEyB,EAAE,IAAI1B,EAAE,GAAGC,EAAT,CAAJ,CAAP;;AACF;AACE,aAAO,IAAP;AAdJ;AAgBD,C,CAED;;;AACA,SAAS+E,gBAAT,CAA0BnB,KAA1B,EAAiC3B,IAAjC,EAAuC+C,IAAvC,EAA6C;AAC3C,UAAQpB,KAAR;AACE,SAAK1E,OAAL;AACA,SAAKM,MAAL;AACA,SAAKF,KAAL;AACA,SAAKH,OAAL;AACE,aAAO6F,IAAP;;AAEF,SAAKvF,KAAL;AACA,SAAKF,IAAL;AACE,aAAO0C,IAAP;;AACF;AACE,aAAO5D,OAAP;AAXJ;AAaD;;AAED,SAAS4G,OAAT,GAAmB;AACjB;AACA;AACA,MAAIjB,WAAJ,EAAiBkB,WAAjB,EAA8BC,SAA9B,CAHiB,CAIjB;;AAEA,MAAIC,IAAJ;AAEA;;AACA,MAAIC,EAAJ;AACA,MAAIC,MAAJ;AACA,MAAIZ,IAAJ,EAAUa,IAAV,CAXiB,CAajB;;AACA,MAAIC,KAAJ,EAAWC,KAAX;AACA,MAAI7B,KAAJ,EAAWN,IAAX;AACA,MAAIoC,EAAJ,EAAQC,EAAR;AAEA;AAEA;;AACAN,EAAAA,EAAE,GAAGtD,QAAQ,CAACrJ,QAAQ,CAACgL,UAAU,EAAX,CAAT,EAAyB,EAAzB,CAAb,CArBiB,CAsBjB;;AACA;;AACA8B,EAAAA,KAAK,GAAGtL,UAAU,CAACmL,EAAD,EAAK,CAAL,CAAlB;AACAI,EAAAA,KAAK,GAAGvL,UAAU,CAACmL,EAAE,GAAG,CAAN,EAAS,CAAT,CAAlB,CAzBiB,CA0BjB;AACA;;AACAzB,EAAAA,KAAK,GAAG7B,QAAQ,CAACyD,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAD,EAAc,EAAd,CAAhB;AACAlC,EAAAA,IAAI,GAAGvB,QAAQ,CAACyD,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAD,EAAc,EAAd,CAAf,CA7BiB,CA8BjB;AAEA;;AACAxB,EAAAA,WAAW,GAAGL,mBAAmB,CAACC,KAAD,EAAQN,IAAR,CAAjC;AACA4B,EAAAA,WAAW,GAAGrB,mBAAmB,CAACD,KAAD,CAAjC;AACAuB,EAAAA,SAAS,GAAGrB,iBAAiB,CAACF,KAAD,CAA7B,CAnCiB,CAoCjB;;AACAwB,EAAAA,IAAI,GAAGrB,YAAY,CAAC1C,UAAD,EAAa2C,WAAb,EAA0BJ,KAA1B,CAAnB;AAEA8B,EAAAA,EAAE,GAAGR,WAAW,GAAGnD,QAAQ,CAAC0D,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAD,EAAc,EAAd,CAAX,GAA+B5G,KAA/C;AACA8G,EAAAA,EAAE,GAAGT,WAAW,GAAGnD,QAAQ,CAAC0D,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAD,EAAc,EAAd,CAAX,GAA+B5G,KAA/C;AAEA6F,EAAAA,IAAI,GAAGS,SAAS,GAAGjL,UAAU,CAACmL,EAAE,GAAG,CAAL,GAASH,WAAV,CAAb,GAAsC7G,OAAO,CAAC/D,KAAR,EAAtD;AAEAiL,EAAAA,IAAI,GAAG7D,QAAQ,CAAC2D,EAAE,GAAG,CAAL,GAASH,WAAT,IAAwBC,SAAS,IAAI,CAArC,CAAD,CAAf;AAEAG,EAAAA,MAAM,GACJ1B,KAAK,IAAIvE,IAAT,IAAiBuE,KAAK,IAAItE,KAA1B,GACIoC,QAAQ,CAACK,QAAQ,CAACrJ,QAAQ,CAACgM,IAAD,CAAT,EAAiB,EAAjB,CAAT,CADZ,GAEIa,IAHN;AAKA;;AACAzJ,EAAAA,MAAM,GAAGsJ,IAAT;AACArJ,EAAAA,OAAO,GAAG6H,KAAV;AACA5H,EAAAA,MAAM,GAAGsH,IAAT;AACArH,EAAAA,IAAI,GAAGyJ,EAAP;AACAxJ,EAAAA,IAAI,GAAGyJ,EAAP;AACAxJ,EAAAA,MAAM,GAAGuI,IAAI,CAACpK,KAAL,EAAT;AACA8B,EAAAA,MAAM,GAAGmJ,IAAI,CAACjL,KAAL,EAAT;AACAsG,EAAAA,QAAQ,GAAG0E,MAAM,CAAChL,KAAP,EAAX;AACA;;;;;;;;;AAUD;;AACD,SAASsL,QAAT,GAAoB;AAClB,MAAIR,IAAJ;AAEA,MAAIS,KAAJ,EAAWC,KAAX;AACA,MAAIlH,IAAJ,EAAUD,IAAV;AACA,MAAIsD,IAAJ,EAAUC,IAAV;AAEA,MAAIzD,IAAJ,EAAUC,IAAV;AAEAE,EAAAA,IAAI,GAAGwF,YAAY,EAAnB;AACAzF,EAAAA,IAAI,GAAGwF,YAAY,EAAnB;AACA1F,EAAAA,IAAI,GAAGwF,YAAY,EAAnB;AACAvF,EAAAA,IAAI,GAAGwF,YAAY,EAAnB;AAEAvL,EAAAA,YAAY,CAAC8F,IAAb,GAAoBA,IAApB;AACA9F,EAAAA,YAAY,CAAC+F,IAAb,GAAoBA,IAApB,CAfkB,CAgBlB;AACA;;AACA/F,EAAAA,YAAY,CAACoN,IAAb,GAlBkB,CAoBlB;;AACAF,EAAAA,KAAK,GAAGlN,YAAY,CAACyF,CAArB;AACA0H,EAAAA,KAAK,GAAGnN,YAAY,CAAC2F,CAArB;AAEA;;AACA2D,EAAAA,IAAI,GAAGoC,YAAY,CAAC5F,IAAD,EAAOoH,KAAP,CAAnB;AACA3D,EAAAA,IAAI,GAAGqC,YAAY,CAAC7F,IAAD,EAAOoH,KAAP,CAAnB;AAEA;;AACAtM,EAAAA,IAAI,GAAG6C,MAAM,IAAIyD,IAAV,GAAiBD,IAAjB,GAAwBxD,MAA/B;AAEAjB,EAAAA,MAAM,GAAGwC,MAAT;AACAvC,EAAAA,OAAO,GAAGwC,OAAV;AACAvC,EAAAA,MAAM,GAAGwC,MAAT;AACAvC,EAAAA,MAAM,GAAG0C,MAAM,CAAC3D,KAAP,EAAT;AACAkB,EAAAA,MAAM,GAAGyG,IAAI,CAAC3H,KAAL,EAAT;AACAmB,EAAAA,MAAM,GAAGyG,IAAI,CAAC5H,KAAL,EAAT;AACAoB,EAAAA,MAAM,GAAGkD,IAAT;AACAjD,EAAAA,MAAM,GAAGgD,IAAT;AACA/C,EAAAA,MAAM,GAAG6C,IAAT;AACA5C,EAAAA,MAAM,GAAG6C,IAAT;AAEA;;AAEA9E,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAauB,MAAzB;AACAxB,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAcwB,OAA1B;AACAzB,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAayB,MAAzB;AACA1B,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAa0B,MAAzB;AACA3B,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAa2B,MAAzB;AACA5B,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAa4B,MAAzB;AACA7B,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAa6B,MAAzB;AAEA,SAAO,CAAP;AACD;;AACD,SAASsK,SAAT,GAAqB;AACnB;AACA,MAAIC,IAAJ;AACA,MAAIpB,MAAJ;AACA,MAAIjG,IAAJ;AAEA,MAAIsH,IAAJ,EAAUC,IAAV;AACA,MAAInB,IAAJ;AAEAH,EAAAA,MAAM,GAAG1H,OAAO,IAAIiC,IAAX,GAAkBhC,MAAlB,GAA2BwC,MAApC;AACAsG,EAAAA,IAAI,GAAGzB,YAAY,CAACtH,OAAD,EAAUG,MAAV,EAAkBD,MAAlB,CAAnB;AACA8I,EAAAA,IAAI,GAAGxB,YAAY,CAACxH,OAAD,EAAUI,MAAV,EAAkBF,MAAlB,CAAnB;AAEAmE,EAAAA,MAAM,GACJrE,OAAO,IAAIiC,IAAX,IACA,EACE7E,MAAM,IAAIb,IAAV,IACAa,MAAM,IAAId,IADV,IAEAc,MAAM,IAAIZ,IAFV,IAGC0C,MAAM,IAAI3C,IAAV,IAAkB2C,MAAM,IAAI5C,IAA5B,IAAoC4C,MAAM,IAAI1C,IAJjD,CAFF,CAbmB,CAsBnB;;AACAqL,EAAAA,IAAI,GAAG7B,GAAG,CAACgD,IAAD,EAAOD,IAAP,EAAarB,MAAb,CAAV;AAEAoB,EAAAA,IAAI,GAAG,CAAC,CAACnB,YAAY,CAAC1H,MAAD,CAArB,CAzBmB,CA0BnB;;AACAwB,EAAAA,IAAI,GAAGzB,OAAO,IAAI6B,OAAX,GAAsBiH,IAAI,GAAGzI,MAAH,GAAYqB,KAAtC,GAA+CrB,MAAtD;AAEA;;AACA,MAAIgE,MAAJ,EAAY;AACVC,IAAAA,EAAE,GAAGF,MAAL;AACA3H,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAe4H,EAA3B;AACD;;AAED5G,EAAAA,MAAM,GAAGqC,MAAT;AACApC,EAAAA,OAAO,GAAGqC,OAAV;AACApC,EAAAA,KAAK,GAAGkL,IAAR;AACAjL,EAAAA,MAAM,GAAGgK,IAAI,CAAC1K,KAAL,EAAT;AACAW,EAAAA,MAAM,GAAGqC,MAAM,CAAChD,KAAP,EAAT;AACAY,EAAAA,MAAM,GAAG0D,IAAT;AACAzD,EAAAA,MAAM,GAAGsC,MAAT;AACA;;;;;;;;;;AAUD;;AACD,SAAS2I,QAAT,GAAoB;AAClB,MAAIhB,IAAJ;AACA9D,EAAAA,UAAU,GAAG,KAAb;AACA,MAAI+E,QAAJ,EAAcC,SAAd,CAHkB,CAIlB;;AACA,MAAIC,OAAJ,EAAa5D,IAAb;AACA,MAAI6D,IAAI,GAAGnI,OAAO,CAAC/D,KAAR,EAAX;AAEA+L,EAAAA,QAAQ,GAAGzJ,OAAO,IAAIuC,OAAX,IAAsBvC,OAAO,IAAI6C,KAAjC,IAA0C7C,OAAO,IAAI2C,IAAhE;AACA+G,EAAAA,SAAS,GAAG1J,OAAO,IAAIsC,OAAX,IAAsBtC,OAAO,IAAI4C,MAAjC,IAA2C5C,OAAO,IAAI0C,KAAlE;AAEAqD,EAAAA,IAAI,GAAGZ,QAAQ,CAACrJ,QAAQ,CAACqM,gBAAgB,CAACnI,OAAD,EAAUG,MAAV,EAAkBD,MAAlB,CAAjB,CAAT,EAAsD,EAAtD,CAAf;AACAyJ,EAAAA,OAAO,GAAGxJ,MAAV;AAEA,MAAIsJ,QAAJ,EAAcG,IAAI,GAAGtM,UAAU,CAACyI,IAAD,EAAO,CAAP,CAAjB;AAEd,MAAIhB,IAAI,GAAG,CAAX;;AACA,MAAI2E,SAAJ,EAAe;AACb3E,IAAAA,IAAI,GAAGkB,WAAW,CAACF,IAAD,EAAO4D,OAAP,CAAlB;AACD;;AACD,MAAIC,IAAI,IAAI,IAAR,IAAgB7E,IAAI,IAAI,IAA5B,EAAkCL,UAAU,GAAG,IAAb;AAElC8D,EAAAA,IAAI,GAAG9D,UAAU,GAAG5H,IAAH,GAAUiD,MAA3B;AAEA;;AACApC,EAAAA,MAAM,GAAG6K,IAAT;AACA5K,EAAAA,OAAO,GAAGoC,OAAV;AACAnC,EAAAA,MAAM,GAAGqC,MAAM,CAACxC,KAAP,EAAT;AACAI,EAAAA,MAAM,GAAG8L,IAAI,CAAClM,KAAL,EAAT;AACAK,EAAAA,MAAM,GAAGqC,MAAT;AACApC,EAAAA,MAAM,GAAGqC,MAAT;AAEArD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACD;;AACD,SAAS4M,WAAT,GAAuB;AACrBjN,EAAAA,IAAI,GAAG6C,MAAM,IAAIyD,IAAV,GAAiBD,IAAjB,GAAwBxD,MAA/B;AAEA1D,EAAAA,YAAY,CAACiG,IAAb,GAAoBnC,MAApB;AACA9D,EAAAA,YAAY,CAACgG,IAAb,GAAoBjC,MAApB;AACA/D,EAAAA,YAAY,CAAC6F,CAAb,GAAiBjC,MAAM,CAACjC,KAAP,EAAjB;AACA3B,EAAAA,YAAY,CAAC4F,CAAb,GAAiB/B,MAAM,CAAClC,KAAP,EAAjB;AACD;;AAED,SAASoM,cAAT,GAA0B;AACxB,MAAIC,mBAAmB,GAAGxJ,OAAO,IAAIkC,IAAX,IAAmB,CAACtE,KAA9C;AACA,MAAI6L,eAAe,GACjB,CAACzJ,OAAO,IAAIgC,OAAX,IAAsBhC,OAAO,IAAIsC,KAAlC,MACChC,MAAM,IAAI7B,MAAV,IAAoB6B,MAAM,IAAI5B,MAD/B,CADF;AAGA,MAAIgL,SAAS,GACXtM,MAAM,IAAIb,IAAV,IACAa,MAAM,IAAId,IADV,IAEAc,MAAM,IAAIZ,IAFV,IAGC0C,MAAM,IAAI3C,IAAV,IAAkB2C,MAAM,IAAI5C,IAA5B,IAAoC4C,MAAM,IAAI1C,IAJjD;AAMAuG,EAAAA,OAAO,GACL0G,eAAe,IAAK/I,OAAO,IAAI0B,IAAX,IAAmBpC,OAAO,IAAIoC,IAA9B,IAAsC3C,OAAO,IAAI2C,IADvE;AAEAY,EAAAA,QAAQ,GAAG,KAAX;AAEAC,EAAAA,OAAO,GAAGwG,eAAV;AACAvG,EAAAA,QAAQ,GACLlD,OAAO,IAAIkC,IAAX,IAAmB,CAACtE,KAArB,IACC,EACC,CAACoC,OAAO,IAAIgC,OAAX,IAAsBhC,OAAO,IAAIsC,KAAlC,MACChC,MAAM,IAAI7B,MAAV,IAAoB6B,MAAM,IAAI5B,MAD/B,CADD,MAIEgC,OAAO,IAAI0B,IAAX,IAAmBpC,OAAO,IAAIoC,IAA9B,IAAsC3C,OAAO,IAAI2C,IAJnD,CAFH;AAQAe,EAAAA,OAAO,GAAG,KAAV;AACAC,EAAAA,QAAQ,GAAGoG,mBAAmB,IAAIC,eAAlC;AAEAlG,EAAAA,OAAO,GAAGrE,MAAM,IAAI3C,IAAV,IAAkB2C,MAAM,IAAI5C,IAA5B,IAAoC4C,MAAM,IAAI1C,IAAxD;AACAgH,EAAAA,QAAQ,GAAG,KAAX;AAEAH,EAAAA,OAAO,GAAG,KAAV;AACAC,EAAAA,QAAQ,GACNpE,MAAM,IAAI3C,IAAV,IACA2C,MAAM,IAAI5C,IADV,IAEA4C,MAAM,IAAI1C,IAFV,IAGCY,MAAM,IAAIb,IAAV,IAAkBa,MAAM,IAAId,IAA5B,IAAoCc,MAAM,IAAIZ,IAJjD;AAKD;;AAED,SAASmN,MAAT,GAAkB;AAChBpG,EAAAA,OAAO,GAAG,KAAV;AACAC,EAAAA,QAAQ,GAAG,IAAX;AACAtE,EAAAA,MAAM,GAAGyD,IAAT;AACAxD,EAAAA,OAAO,GAAGyC,IAAV;AACAxC,EAAAA,MAAM,GAAG8B,OAAO,CAAC/D,KAAR,EAAT;AACAkC,EAAAA,MAAM,GAAG6B,OAAO,CAAC/D,KAAR,EAAT;AACAmC,EAAAA,MAAM,GAAGoC,KAAT;AACAnC,EAAAA,MAAM,GAAGmC,KAAT;AACD;;AACD,SAASkI,MAAT,GAAkB;AAChBvG,EAAAA,OAAO,GAAG,KAAV;AACAC,EAAAA,QAAQ,GAAG,IAAX;AACA9D,EAAAA,MAAM,GAAGmD,IAAT;AACAlD,EAAAA,OAAO,GAAGmC,IAAV;AACAhC,EAAAA,MAAM,GAAGsB,OAAO,CAAC/D,KAAR,EAAT;AACAwC,EAAAA,MAAM,GAAGuB,OAAO,CAAC/D,KAAR,EAAT;AACA0C,EAAAA,MAAM,GAAG6B,KAAT;AACA5B,EAAAA,MAAM,GAAG4B,KAAT;AACAhC,EAAAA,KAAK,GAAG,CAAR;AACD;;AACD,SAASmK,MAAT,GAAkB;AAChB1G,EAAAA,OAAO,GAAG,KAAV;AACAC,EAAAA,QAAQ,GAAG,IAAX;AACArD,EAAAA,MAAM,GAAG4C,IAAT;AACA3C,EAAAA,OAAO,GAAG4B,IAAV;AACA3B,EAAAA,MAAM,GAAG,CAAT;AACAE,EAAAA,MAAM,GAAGe,OAAO,CAAC/D,KAAR,EAAT;AACAiD,EAAAA,MAAM,GAAGc,OAAO,CAAC/D,KAAR,EAAT;AACA+C,EAAAA,MAAM,GAAGgB,OAAO,CAAC/D,KAAR,EAAT;AACAoD,EAAAA,MAAM,GAAGmB,KAAT;AACAlB,EAAAA,MAAM,GAAGkB,KAAT;AACArB,EAAAA,MAAM,GAAGqB,KAAT;AACApB,EAAAA,MAAM,GAAGoB,KAAT;AACD;;AAED,SAASoI,MAAT,GAAkB;AAChB7G,EAAAA,OAAO,GAAG,KAAV;AACAC,EAAAA,QAAQ,GAAG,IAAX;AACAzC,EAAAA,MAAM,GAAGkC,IAAT;AACAjC,EAAAA,OAAO,GAAGkB,IAAV;AACAjB,EAAAA,MAAM,GAAG,CAAT;AACAC,EAAAA,IAAI,GAAGc,KAAP;AACAb,EAAAA,IAAI,GAAGa,KAAP;AACAZ,EAAAA,MAAM,GAAGI,OAAO,CAAC/D,KAAR,EAAT;AACA4D,EAAAA,MAAM,GAAGG,OAAO,CAAC/D,KAAR,EAAT;AACD;;AACD,SAAS4M,MAAT,GAAkB;AAChBhH,EAAAA,OAAO,GAAG,KAAV;AACAC,EAAAA,QAAQ,GAAG,IAAX;AACArG,EAAAA,QAAQ,GAAGuE,OAAO,CAAC/D,KAAR,EAAX;AACD;;AAED,SAAS6M,oBAAT,GAAgC;AAC9B,MAAIxG,QAAJ,EAAc;AACZmG,IAAAA,MAAM;AACP,GAFD,MAEO,IAAI,CAACpG,OAAL,EAAc;AACnBrE,IAAAA,MAAM,GAAG9B,MAAT;AACA+B,IAAAA,OAAO,GAAG9B,OAAV;AACA+B,IAAAA,MAAM,GAAG9B,MAAM,CAACH,KAAP,EAAT;AACAkC,IAAAA,MAAM,GAAG9B,MAAM,CAACJ,KAAP,EAAT;AACAmC,IAAAA,MAAM,GAAG9B,MAAT;AACA+B,IAAAA,MAAM,GAAG9B,MAAT;AACD;;AAED,MAAI6F,QAAJ,EAAc;AACZsG,IAAAA,MAAM;AACP,GAFD,MAEO,IAAI,CAACrG,OAAL,EAAc;AACnB/D,IAAAA,MAAM,GAAG9B,MAAT;AACA+B,IAAAA,OAAO,GAAG9B,OAAV;AACAiC,IAAAA,MAAM,GAAG9B,MAAM,CAACX,KAAP,EAAT;AACAwC,IAAAA,MAAM,GAAG9B,MAAM,CAACV,KAAP,EAAT;AACA0C,IAAAA,MAAM,GAAG9B,MAAT;AACA+B,IAAAA,MAAM,GAAG9B,MAAT;AACA0B,IAAAA,KAAK,GAAG9B,KAAR;AACD;;AAED,MAAIwF,QAAJ,EAAc;AACZyG,IAAAA,MAAM;AACP,GAFD,MAEO,IAAI,CAAC1G,OAAL,EAAc;AACnBpD,IAAAA,MAAM,GAAG9B,MAAT;AACA+B,IAAAA,OAAO,GAAG9B,OAAV;AACA+B,IAAAA,MAAM,GAAG9B,MAAT;AACAgC,IAAAA,MAAM,GAAG9B,MAAM,CAAClB,KAAP,EAAT;AACAiD,IAAAA,MAAM,GAAG9B,MAAM,CAACnB,KAAP,EAAT;AACA+C,IAAAA,MAAM,GAAG9B,MAAM,CAACjB,KAAP,EAAT;AACAoD,IAAAA,MAAM,GAAG9B,MAAT;AACA+B,IAAAA,MAAM,GAAG9B,MAAT;AACA2B,IAAAA,MAAM,GAAG9B,MAAT;AACA+B,IAAAA,MAAM,GAAG9B,MAAT;AACD;;AAED,MAAI0E,QAAJ,EAAc;AACZ4G,IAAAA,MAAM;AACP,GAFD,MAEO,IAAI,CAAC7G,OAAL,EAAc;AACnBxC,IAAAA,MAAM,GAAG9B,MAAT;AACA+B,IAAAA,OAAO,GAAG9B,OAAV;AACA+B,IAAAA,MAAM,GAAG9B,MAAT;AACA+B,IAAAA,IAAI,GAAG9B,IAAP;AACA+B,IAAAA,IAAI,GAAG9B,IAAP;AACA+B,IAAAA,MAAM,GAAG9B,MAAM,CAAC7B,KAAP,EAAT;AACA4D,IAAAA,MAAM,GAAG9B,MAAM,CAAC9B,KAAP,EAAT;AACD;;AACD,MAAI6F,QAAJ,EAAc;AACZ+G,IAAAA,MAAM,GADM,CAEZ;AACD,GAHD,MAGO,IAAI,CAAChH,OAAL,EAAcpG,QAAQ,GAAG8G,QAAX;AACtB;;AACD,SAAS/H,KAAT,GAAgB;AACd;AACAF,EAAAA,YAAY,CAACyO,KAAb;AAEA;;AACAF,EAAAA,MAAM;AACND,EAAAA,MAAM;AACND,EAAAA,MAAM;AACND,EAAAA,MAAM;AACND,EAAAA,MAAM;AAEN;;AACArF,EAAAA,EAAE,GAAG1B,EAAL;AAEA;;AACAvG,EAAAA,IAAI,GAAGqG,IAAP;AACD;;AAED,SAASwH,mBAAT,GAA+B;AAC7BzN,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CACE,UACEwC,MADF,GAEE,UAFF,GAGEC,OAHF,GAIE,SAJF,GAKEC,MALF,GAME,SANF,GAOEC,MAPF,GAQE,SARF,GASEC,MATF,GAUE,GAVF,GAWE,SAXF,GAYEC,MAZF,GAaE,GAdJ;AAgBA9C,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CACE,UACE8C,MADF,GAEE,WAFF,GAGEC,OAHF,GAIE,SAJF,GAKEC,KALF,GAME,UANF,GAOEC,MAPF,GAQE,UARF,GASEC,MATF,GAUE,UAVF,GAWEC,MAXF,GAYE,UAZF,GAaEC,MAbF,GAcE,GAfJ;AAiBArD,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CACE,UACEqD,MADF,GAEE,WAFF,GAGEC,OAHF,GAIE,UAJF,GAKEC,MALF,GAME,UANF,GAOEC,MAPF,GAQE,UARF,GASEC,MATF,GAUE,UAVF,GAWEC,MAXF,GAYE,UAZF,GAaEC,MAbF,GAcE,UAdF,GAeEC,MAfF,GAgBE,UAhBF,GAiBEC,MAjBF,GAkBE,UAlBF,GAmBEC,MAnBF,GAoBE,GArBJ;AAuBA/D,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CACE,UACE+D,MADF,GAEE,WAFF,GAGEC,OAHF,GAIE,UAJF,GAKEC,MALF,GAME,QANF,GAOEC,IAPF,GAQE,QARF,GASEC,IATF,GAUE,UAVF,GAWEC,MAXF,GAYE,UAZF,GAaEC,MAbF,GAcE,GAfJ;AAiBAtE,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYC,QAAZ,GAAuB,GAAnC;AACD;;AACD,SAASV,MAAT,CAAekO,KAAf,EAAsB;AACpB,OAAK,IAAI7O,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6O,KAApB,EAA2B7O,CAAC,EAA5B,EAAgC;AAC9B8O,IAAAA,IAAI;AACL;;AACD,MAAI/N,IAAI,IAAIC,IAAR,IAAgBD,IAAI,IAAIE,IAAxB,IAAgCF,IAAI,IAAIG,IAA5C,EAAkD;AAChD,WAAOH,IAAP;AACD;;AACD,SAAO,CAAP;AACD;;AACD,SAAS+N,IAAT,GAAgB;AACd;AAEA,MAAI/N,IAAI,IAAIC,IAAR,IAAgBD,IAAI,IAAIE,IAAxB,IAAgCF,IAAI,IAAIG,IAA5C,EAAkD;AAChD,WAAO,CAAP;AACD,GALa,CAMd;;AACA;AAEA;;;AACAwN,EAAAA,oBAAoB;AACpBxO,EAAAA,YAAY,CAAC6O,KAAb,GAXc,CAad;;AACAf,EAAAA,WAAW;AACXL,EAAAA,QAAQ;AACRJ,EAAAA,SAAS;AACTJ,EAAAA,QAAQ;AACRX,EAAAA,OAAO,GAlBO,CAoBd;;AACAyB,EAAAA,cAAc;AAEd;AACA;AACA;AACA;;AACA,SAAO,CAAP;AACD","sourcesContent":["const stats = [\"\", \"SAOK\", \"SADR\", \"SINS\", \"SHLT\", \"SBUB\"];\nconst icodes = [\n  \"HALT\",\n  \"NOP\",\n  \"RRMOVQ\",\n  \"IRMOVQ\",\n  \"RMMOVQ\",\n  \"MRMOVQ\",\n  \"OPQ\",\n  \"JXX\",\n  \"CALL\",\n  \"RET\",\n  \"PUSHQ\",\n  \"IPOPQ\"\n];\nconst regs = [\n  \"rax\",\n  \"rcx\",\n  \"rdx\",\n  \"rbx\",\n  \"rsp\",\n  \"rbp\",\n  \"rsi\",\n  \"rdi\",\n  \"r8\",\n  \"r9\",\n  \"r10\",\n  \"r11\",\n  \"r12\",\n  \"r13\",\n  \"r14\",\n  \"\"\n];\n\nlet breakpoints = new Set();\n\nexport class Pipe {\n  constructor() {\n    this.Memory = Memory;\n  }\n  getRegisterFile() {\n    let rtn = [\"\"];\n    rtn.length = 16;\n    for (let i = 0; i < 16; i++) {\n      rtn[i] = valToHex(registerFile.registers[i]);\n    }\n    return rtn;\n  }\n  init() {\n    init();\n    breakpoints.clear();\n  }\n  setCode(str) {\n    setCode(str);\n    init();\n  }\n  addBreakpoint(str) {\n    breakpoints.add(str);\n  }\n  deleteBreakpoint(str) {\n    breakpoints.delete(str);\n  }\n  hasBreakpoint(str) {\n    return breakpoints.has(str);\n  }\n\n  stepi(i) {\n    return stepi(i);\n  }\n  run(time) {\n    setTimeout(function func() {\n      if (!(Stat == SINS || Stat == SADR || Stat == SHLT)) {\n        stepi(1);\n        console.log(\"step\");\n        setTimeout(func, time);\n      }\n    }, time);\n  }\n  getPC() {\n    return valToHex(F_predPC);\n  }\n  getStat() {\n    return Stat;\n  }\n  //return [ [addr, hex_val ],...]\n  getMemory() {\n    let rtn = [];\n    let pair = [\"addr\", \"hex_val\"];\n    for (let i = ((MAX_MEM - 8) >> 3) << 3; i >= 0; i -= 8) {\n      let x = valToHex(readMemory(i));\n      if (x != \"0\") {\n        let j = i >> 3;\n        pair[0] = i.toString(16);\n        pair[1] = x;\n        rtn.push(pair.slice());\n      }\n    }\n    return rtn;\n  }\n  getStageStuffs() {\n    return [\n      [\n        [\"m_stat\", stats[m_stat]],\n        [\"m_icode\", icodes[m_icode]],\n        [\"m_valE\", valToHex(m_valE)],\n        [\"m_valM\", valToHex(m_valM)],\n        [\"m_dstE\", regs[m_dstE]],\n        [\"m_dstM\", regs[m_dstM]]\n      ],\n      [\n        [\"e_stat\", stats[e_stat]],\n        [\"e_icodes\", icodes[e_icode]],\n        [\"e_Cnd\", e_Cnd ? \"Y\" : \"N\"],\n        [\"e_valE\", valToHex(e_valE)],\n        [\"e_valA\", valToHex(e_valA)],\n        [\"e_dstE\", regs[e_dstE]],\n        [\"e_dstM\", regs[e_dstM]]\n      ],\n      [\n        [\"d_stat\", stats[d_stat]],\n        [\"d_icode\", icodes[d_icode]],\n        [\"d_ifun\", \"\" + d_ifun],\n        [\"d_valC\", valToHex(d_valC)],\n        [\"d_valA\", valToHex(d_valA)],\n        [\"d_valB\", valToHex(d_valB)],\n        [\"d_dstE\", regs[d_dstE]],\n        [\"d_dstM\", regs[d_dstM]],\n        [\"d_srcA\", regs[d_srcA]],\n        [\"d_srcB\", regs[d_srcB]]\n      ],\n      [\n        [\"f_stat\", stats[f_stat]],\n        [\"f_icode\", icodes[f_icode]],\n        [\"f_ifun\", \"\" + f_ifun],\n        [\"f_rA\", regs[f_rA]],\n        [\"f_rB\", regs[f_rB]],\n        [\"f_valC\", valToHex(f_valC)],\n        [\"f_valP\", valToHex(f_valP)]\n      ],\n      [[\"predPC\", valToHex(F_predPC)]]\n    ];\n  }\n\n  getStageRegisters() {\n    return [\n      [\n        [\"stat\", stats[W_stat]],\n        [\"icode\", icodes[W_icode]],\n        [\"valE\", valToHex(W_valE)],\n        [\"valM\", valToHex(W_valM)],\n        [\"dstE\", regs[W_dstE]],\n        [\"dstM\", regs[W_dstM]]\n      ],\n      [\n        [\"stat\", stats[M_stat]],\n        [\"icodes\", icodes[M_icode]],\n        [\"Cnd\", M_Cnd ? \"Y\" : \"N\"],\n        [\"valE\", valToHex(M_valE)],\n        [\"valA\", valToHex(M_valA)],\n        [\"dstE\", regs[M_dstE]],\n        [\"dstM\", regs[M_dstM]]\n      ],\n      [\n        [\"stat\", stats[E_stat]],\n        [\"icode\", icodes[E_icode]],\n        [\"ifun\", \"\" + E_ifun],\n        [\"valC\", valToHex(E_valC)],\n        [\"valA\", valToHex(E_valA)],\n        [\"valB\", valToHex(E_valB)],\n        [\"dstE\", regs[E_dstE]],\n        [\"dstM\", regs[E_dstM]],\n        [\"srcA\", regs[E_srcA]],\n        [\"srcB\", regs[E_srcB]]\n      ],\n      [\n        [\"stat\", stats[D_stat]],\n        [\"icode\", icodes[D_icode]],\n        [\"ifun\", \"\" + D_ifun],\n        [\"rA\", regs[D_rA]],\n        [\"rB\", regs[D_rB]],\n        [\"valC\", valToHex(D_valC)],\n        [\"valP\", valToHex(D_valP)]\n      ],\n      [[\"predPC\", valToHex(F_predPC)]]\n    ];\n  }\n}\n\n/* Classes */\nclass RegisterFile {\n  constructor() {\n    this.A = VALZERO.slice();\n    this.B = VALZERO.slice();\n    this.M = VALZERO.slice();\n    this.E = VALZERO.slice();\n    /*this.B = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    this.M = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    this.E = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    */\n    this.srcA = this.srcB = this.dstM = this.dstE = RNONE;\n    this.registers = [VALZERO.slice()];\n    this.registers.length = 16;\n    for (let i = 0; i < 16; i++) this.registers[i] = this.A;\n    console.log(this.registers);\n  }\n  reset() {\n    this.A = VALZERO.slice();\n    this.B = VALZERO.slice();\n    this.M = VALZERO.slice();\n    this.E = VALZERO.slice();\n    for (let i = 0; i < 16; i++) this.registers[i] = VALZERO.slice();\n    this.srcA = this.srcB = this.dstM = this.dstE = RNONE;\n  }\n  read() {\n    this.A = this.registers[this.srcA].slice();\n    this.B = this.registers[this.srcB].slice();\n  }\n  write() {\n    //!caution, if dstE == dstM(!=RNONE)(e.g. pop %rsp), only to write dstM\n\n    this.registers[this.dstE] = this.E.slice();\n    this.registers[this.dstM] = this.M.slice();\n  }\n}\n\n/* Classes end */\n\nconst MAX_MEM = 800;\n\nconst IHALT = 0,\n  INOP = 1,\n  IRRMOVQ = 2,\n  IIRMOVQ = 3,\n  IRMMOVQ = 4,\n  IMRMOVQ = 5,\n  IOPQ = 6,\n  IJXX = 7,\n  ICALL = 8,\n  IRET = 9,\n  IPUSHQ = 10,\n  IPOPQ = 11;\nconst FNONE = 0;\nconst RNONE = 15,\n  RRSP = 4;\nconst ALUADD = 0;\nconst SAOK = 1,\n  SADR = 2,\n  SINS = 3,\n  SHLT = 4,\n  SBUB = 5;\nconst ZF = 4,\n  SF = 2,\n  OF = 1;\n\nconst VALZERO = [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"];\n\n/**  Stage Registers **/\nlet F_predPC = VALZERO.slice(),\n  F_stall,\n  F_bubble;\nlet D_stat, D_icode, D_ifun, D_rA, D_rB, D_valC, D_valP, D_stall, D_bubble;\nlet E_stat,\n  E_icode,\n  E_ifun,\n  E_dstE,\n  E_dstM,\n  E_srcA,\n  E_srcB,\n  E_valA,\n  E_valB,\n  E_valC,\n  E_stall,\n  E_bubble;\nlet M_stat, M_icode, M_Cnd, M_dstE, M_dstM, M_valA, M_valE, M_stall, M_bubble;\nlet W_stat, W_icode, W_dstE, W_dstM, W_valM, W_valE, W_stall, W_bubble;\n\n/** Stage outputs **/\nlet f_predPC,\n  f_stat,\n  f_icode,\n  f_ifun,\n  f_rA,\n  f_rB,\n  f_valC,\n  f_valP,\n  f_stall,\n  f_bubble;\nlet d_stat,\n  d_icode,\n  d_ifun,\n  d_valA,\n  d_valB,\n  d_valC,\n  d_dstE,\n  d_dstM,\n  d_srcA,\n  d_srcB,\n  d_stall,\n  d_bubble;\nlet e_stat, e_icode, e_Cnd, e_dstE, e_dstM, e_valA, e_valE, e_stall, e_bubble;\nlet m_stat, m_icode, m_dstE, m_dstM, m_valM, m_valE, m_stall, m_bubble;\n\nlet imem_error, dmem_error;\nlet Memory = [\"0\"];\nMemory.length = MAX_MEM;\n\nlet registerFile = new RegisterFile();\n\nlet alu_cc;\nlet set_cc;\nlet CC;\nlet Stat;\n\n//everything named val is stored by string array ,each byte\n\n//should be positive;\nfunction intToVal(x) {\n  let rtn = VALZERO.slice();\n  rtn.length = 8;\n  for (let i = 0; i < 8; i++) {\n    let temp = x & 0xff;\n    rtn[i] = temp.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n    x >>= 8;\n  }\n  return rtn;\n}\n/* return string */\nfunction valToHex(val) {\n  if (val == undefined) return \"0\";\n  let rtn = \"\";\n  let zero_front = true;\n  let i = 7;\n\n  while (i >= 0 && parseInt(val[i], 16) == 0) {\n    i--;\n  }\n  if (i < 0) return \"0\";\n  if (val[i][0] != \"0\") rtn += val[i][0];\n  rtn += val[i][1];\n  for (let j = i - 1; j >= 0; j--) {\n    rtn += val[j][0] + val[j][1];\n  }\n  return rtn;\n}\n//return a val\nfunction addq(valA, valB) {\n  let rtn = VALZERO.slice();\n  rtn.length = 8;\n  let carry = 0;\n  for (let i = 0; i < 8; i++) {\n    let int_sum = parseInt(valA[i], 16) + parseInt(valB[i], 16) + carry;\n    carry = int_sum >> 8;\n    let s = int_sum & 0xff;\n    let str_s = s.toString(16);\n    if (str_s.length == 1) rtn[i] = \"0\" + str_s;\n    else rtn[i] = str_s;\n  }\n  //overflow\n  //if (carry) console.log(\"overflow\");\n\n  return rtn;\n}\nfunction subq(valA, valB) {\n  let rtn = VALZERO.slice();\n  let notB = xorq(valB, [\"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\"]);\n  return addq(\n    valA,\n    addq(notB, [\"01\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"])\n  );\n}\nfunction andq(valA, valB) {\n  let rtn = VALZERO.slice();\n  rtn.length = 8;\n  for (let i = 0; i < 8; i++) {\n    let s = parseInt(valA[i], 16) & parseInt(valB[i], 16) & 0xff;\n    rtn[i] = s.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n  }\n  return rtn;\n}\nfunction xorq(valA, valB) {\n  let rtn = VALZERO.slice();\n  rtn.length = 8;\n  for (let i = 0; i < 8; i++) {\n    let s = (parseInt(valA[i], 16) ^ parseInt(valB[i], 16)) & 0xff;\n    rtn[i] = s.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n  }\n  return rtn;\n}\n\n/* read eight bytes from memory, return null when error*/\n/* return rtn = [\"00\", \"02\", ...] */\nfunction readMemory(addr, bytes = 8) {\n  if (addr + bytes > MAX_MEM || addr < 0) {\n    return null;\n  }\n  let rtn = VALZERO.slice();\n  rtn.length = bytes;\n  for (let i = 0; i < bytes; i++) {\n    rtn[i] = Memory[addr + i];\n    if (rtn[i] == undefined) rtn[i] = \"00\";\n  }\n  return rtn;\n}\n/* write val into memory e.g. val = [\"00\", \"01\"]*/\nfunction writeMemory(addr, val) {\n  let len = val.length;\n  if (addr + len > MAX_MEM || addr < 0) return null;\n  for (let i = 0; i < len; i++) {\n    Memory[addr + i] = val[i];\n  }\n  return true;\n}\n\nfunction setCode(code) {\n  let isValid = true;\n  for (let i = 0; i < code.length; i++) {\n    if (code[i] == \"\\n\") {\n      isValid = true;\n      continue;\n    }\n    if (\n      isValid &&\n      i + 2 < code.length &&\n      code[i] == \"0\" &&\n      code[i + 1] == \"x\"\n    ) {\n      isValid = false;\n\n      let hex_addr = \"\";\n      let addr;\n      i++;\n      //console.log(\"find it\" + code[i + 2] + code[i + 3] + code[i + 4]);\n      while (code[++i] == \"0\") {}\n      while (code[i] != \":\") hex_addr += code[i++];\n      addr = parseInt(hex_addr, 16);\n      if (isNaN(addr)) {\n        addr = 0;\n      }\n      i += 2;\n      let j;\n      for (j = 0; i + j < code.length && code[i + j] != \" \"; j = j + 2) {\n        Memory[addr + (j >> 1)] = code[i + j];\n        Memory[addr + (j >> 1)] += code[i + j + 1];\n      }\n      i += j - 1;\n    } else isValid = false;\n  }\n}\n\nfunction ops(a, b, ifun) {\n  let rtn;\n  switch (ifun) {\n    case 0:\n      rtn = addq(a, b);\n      break;\n    case 1:\n      rtn = subq(a, b);\n      break;\n    case 2:\n      rtn = andq(a, b);\n      break;\n    case 3:\n      rtn = xorq(a, b);\n      break;\n    default:\n      rtn = null;\n      break;\n  }\n  let rtn_sign = parseInt(rtn[7], 16) >> 7;\n  let a_sign = parseInt(a[7], 16) >> 7;\n  let b_sign = parseInt(b[7], 16) >> 7;\n  alu_cc = 0;\n  if (parseInt(valToHex(rtn), 16) == 0) alu_cc |= ZF;\n  if (rtn_sign == 1) alu_cc |= SF;\n  if (a_sign == b_sign && rtn_sign != a_sign) alu_cc |= OF;\n\n  return rtn;\n}\n\n/* long long */\nfunction check_f_pc() {\n  //!Mispredicted branch. Fetch at incremented PC\n  if (M_icode == IJXX && !M_Cnd) return M_valA;\n  //!Completion of RET instruction\n  else if (W_icode == IRET) return W_valM;\n  //!Default: Use predicted P\n  else return F_predPC;\n}\n// return bool\nfunction check_f_instr_valid(icode, ifun) {\n  switch (icode) {\n    case IJXX:\n    case IRRMOVQ:\n      return ifun < 7;\n    case IOPQ:\n      return ifun < 4;\n    default:\n      return ifun < 1;\n  }\n}\n//return bool\nfunction check_f_need_regids(icode) {\n  switch (icode) {\n    case IHALT:\n    case INOP:\n    case IJXX:\n    case ICALL:\n    case IRET:\n      return false;\n    default:\n      return true;\n  }\n}\n//return bool\nfunction check_f_need_valC(icode) {\n  switch (icode) {\n    case IIRMOVQ:\n    case IRMMOVQ:\n    case IMRMOVQ:\n    case IJXX:\n    case ICALL:\n      return true;\n    default:\n      return false;\n  }\n}\n//return int\nfunction check_f_stat(imem_error, instr_valid, icode) {\n  if (imem_error == true) return SADR;\n  else if (!instr_valid == true) return SINS;\n  else if (icode == IHALT) return SHLT;\n  else return SAOK;\n}\n//return int\nfunction check_d_srcA() {\n  switch (D_icode) {\n    case IRRMOVQ:\n    case IRMMOVQ:\n    case IOPQ:\n    case IPUSHQ:\n      return D_rA;\n    case IPOPQ:\n    case IRET:\n      return RRSP;\n    default:\n      return RNONE;\n  }\n}\n\n//return  int\nfunction check_d_srcB() {\n  switch (D_icode) {\n    case IMRMOVQ:\n    case IRMMOVQ:\n    case IOPQ:\n      return D_rB;\n\n    case IPUSHQ:\n    case IPOPQ:\n    case ICALL:\n    case IRET:\n      return RRSP;\n    default:\n      return RNONE;\n  }\n}\n//return int\nfunction check_d_dstM() {\n  switch (D_icode) {\n    case IMRMOVQ:\n    case IPOPQ:\n      return D_rA;\n    default:\n      return RNONE;\n  }\n}\n//return int\nfunction check_d_dstE() {\n  switch (D_icode) {\n    case IRRMOVQ: //condition move\n    case IIRMOVQ:\n    case IOPQ:\n      return D_rB;\n    case IPUSHQ:\n    case IPOPQ:\n    case ICALL:\n    case IRET:\n      return RRSP;\n    default:\n      return RNONE;\n  }\n}\n//return long long(long long d_rvalA)\nfunction check_d_valA(d_srcA, d_rvalA) {\n  if (D_icode == ICALL || D_icode == IJXX) {\n    return D_valP;\n  } else if (d_srcA == e_dstE) {\n    return e_valE;\n  } else if (d_srcA == M_dstM) {\n    return m_valM;\n  } else if (d_srcA == M_dstE) {\n    return M_valE;\n  } else if (d_srcA == W_dstM) {\n    return W_valM;\n  } else if (d_srcA == W_dstE) {\n    return W_valE;\n  } else return d_rvalA;\n}\n\n//return long long(long long d_rvalB)\nfunction check_d_valB(d_srcB, d_rvalB) {\n  if (d_srcB == e_dstE) {\n    return e_valE;\n  } else if (d_srcB == M_dstM) {\n    return m_valM;\n  } else if (d_srcB == M_dstE) {\n    return M_valE;\n  } else if (d_srcB == W_dstM) {\n    return W_valM;\n  } else if (d_srcB == W_dstE) {\n    return W_valE;\n  } else return d_rvalB;\n}\n\n//long long: return, valA, valC\nfunction check_e_aluA(icode, valA, valC) {\n  switch (icode) {\n    case IRRMOVQ:\n    case IOPQ:\n      return valA;\n\n    case IIRMOVQ:\n    case IRMMOVQ:\n    case IMRMOVQ:\n      return valC;\n\n    case ICALL:\n    case IPUSHQ:\n      return [\"f8\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\"];\n    //subq(VALZERO.slice());\n\n    case IRET:\n    case IPOPQ:\n      return [\"08\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"];\n    //other operation don't need aluB\n    default:\n      return VALZERO;\n  }\n}\n//long long: return, valB, valC\nfunction check_e_aluB(icode, valB, valC) {\n  switch (icode) {\n    case IRMMOVQ:\n    case IMRMOVQ:\n    case IOPQ:\n    case ICALL:\n    case IPUSHQ:\n    case IRET:\n    case IPOPQ:\n      return valB;\n\n    case IRRMOVQ:\n    case IIRMOVQ:\n      return VALZERO;\n    //other operation don't need aluB\n    default:\n      return VALZERO;\n  }\n}\n//long long: return, a, b, t\n//!alu_cc global, modify it also\nfunction check_e_valE(alufun, valA, valB) {\n  return ops(valA, valB, alufun);\n}\n\n//return bool\n/************ modify it ***********/\nfunction check_e_cond(ifun) {\n  switch (ifun) {\n    case 1:\n      return CC & (ZF | SF);\n    case 2:\n      return CC & SF;\n    case 3:\n      return CC & ZF;\n    case 4:\n      return !(CC & ZF);\n    case 5:\n      return !(CC & SF);\n    case 6:\n      return !(CC & (ZF | SF));\n    default:\n      return true;\n  }\n}\n\n//long long: return, valA, valE\nfunction check_m_mem_addr(icode, valA, valE) {\n  switch (icode) {\n    case IRMMOVQ:\n    case IPUSHQ:\n    case ICALL:\n    case IMRMOVQ:\n      return valE;\n\n    case IPOPQ:\n    case IRET:\n      return valA;\n    default:\n      return VALZERO;\n  }\n}\n\nfunction doFetch() {\n  /* Stage values */\n  //bool\n  let instr_valid, need_regids, need_valC;\n  //let imem_error;\n\n  let stat;\n\n  /* should be long long */\n  let pc;\n  let predPC;\n  let valC, valP;\n\n  //int\n  let split, align;\n  let icode, ifun;\n  let rA, rB;\n\n  /** Select PC **/\n\n  //now pc is a int\n  pc = parseInt(valToHex(check_f_pc()), 16);\n  //console.log(\"pc is\" + pc);\n  /** Fetch **/\n  split = readMemory(pc, 1);\n  align = readMemory(pc + 1, 1);\n  //console.log(split);\n  //console.log(align);\n  icode = parseInt(split[0][0], 16);\n  ifun = parseInt(split[0][1], 16);\n  //console.log(\"icode: \" + icode + \", ifun\" + ifun);\n\n  //bool\n  instr_valid = check_f_instr_valid(icode, ifun);\n  need_regids = check_f_need_regids(icode);\n  need_valC = check_f_need_valC(icode);\n  //console.log(need_regids);\n  stat = check_f_stat(imem_error, instr_valid, icode);\n\n  rA = need_regids ? parseInt(align[0][0], 16) : RNONE;\n  rB = need_regids ? parseInt(align[0][1], 16) : RNONE;\n\n  valC = need_valC ? readMemory(pc + 1 + need_regids) : VALZERO.slice();\n\n  valP = intToVal(pc + 1 + need_regids + (need_valC << 3));\n\n  predPC =\n    icode == IJXX || icode == ICALL\n      ? intToVal(parseInt(valToHex(valC), 16))\n      : valP;\n\n  /** Update **/\n  f_stat = stat;\n  f_icode = icode;\n  f_ifun = ifun;\n  f_rA = rA;\n  f_rB = rB;\n  f_valC = valC.slice();\n  f_valP = valP.slice();\n  f_predPC = predPC.slice();\n  /*\n  console.log(\"f_stat: \" + f_stat);\n  console.log(\"f_icode: \" + f_icode);\n  console.log(\"f_ifun: \" + f_ifun);\n  console.log(\"f_rA: \" + f_rA);\n  console.log(\"f_rB:\" + f_rB);\n\n  console.log(\"f_valC: \" + f_valC);\n  console.log(\"f_valP: \" + f_valP);\n  console.log(\"f_predPC: \" + f_predPC);*/\n}\nfunction doDecode() {\n  let stat;\n\n  let rvalA, rvalB;\n  let dstE, dstM;\n  let valA, valB;\n\n  let srcA, srcB;\n\n  dstE = check_d_dstE();\n  dstM = check_d_dstM();\n  srcA = check_d_srcA();\n  srcB = check_d_srcB();\n\n  registerFile.srcA = srcA;\n  registerFile.srcB = srcB;\n  ///read registerFile as if it were a combinational logic\n  ///i.e. update the read port A B immediately.\n  registerFile.read();\n\n  //should not be modified;\n  rvalA = registerFile.A;\n  rvalB = registerFile.B;\n\n  /** Sel + Fwd A and Fwd B **/\n  valA = check_d_valA(srcA, rvalA);\n  valB = check_d_valB(srcB, rvalB);\n\n  /** Update **/\n  Stat = W_stat == SBUB ? SAOK : W_stat;\n\n  d_stat = D_stat;\n  d_icode = D_icode;\n  d_ifun = D_ifun;\n  d_valC = D_valC.slice();\n  d_valA = valA.slice();\n  d_valB = valB.slice();\n  d_dstE = dstE;\n  d_dstM = dstM;\n  d_srcA = srcA;\n  d_srcB = srcB;\n\n  /** print **/\n\n  console.log(\"d_stat: \" + d_stat);\n  console.log(\"d_icode: \" + d_icode);\n  console.log(\"d_ifun: \" + d_ifun);\n  console.log(\"d_valC: \" + d_valC);\n  console.log(\"d_valA: \" + d_valA);\n  console.log(\"d_valB: \" + d_valB);\n  console.log(\"d_dstE: \" + d_dstE);\n\n  return 0;\n}\nfunction doExecute() {\n  //alu_cc;//!cc from alu\n  let cond;\n  let alufun;\n  let dstE;\n\n  let aluA, aluB;\n  let valE;\n\n  alufun = E_icode == IOPQ ? E_ifun : ALUADD;\n  aluA = check_e_aluA(E_icode, E_valA, E_valC);\n  aluB = check_e_aluB(E_icode, E_valB, E_valC);\n\n  set_cc =\n    E_icode == IOPQ &&\n    !(\n      m_stat == SADR ||\n      m_stat == SINS ||\n      m_stat == SHLT ||\n      (W_stat == SADR || W_stat == SINS || W_stat == SHLT)\n    );\n\n  //!also update alu_cc\n  valE = ops(aluB, aluA, alufun);\n\n  cond = !!check_e_cond(E_ifun);\n  //!update dstE according to condition codes\n  dstE = E_icode == IRRMOVQ ? (cond ? E_dstE : RNONE) : E_dstE;\n\n  /** Update **/\n  if (set_cc) {\n    CC = alu_cc;\n    console.log(\"updateCC: \" + CC);\n  }\n\n  e_stat = E_stat;\n  e_icode = E_icode;\n  e_Cnd = cond;\n  e_valE = valE.slice();\n  e_valA = E_valA.slice();\n  e_dstE = dstE;\n  e_dstM = E_dstM;\n  /*\n  console.log(\"CC: \" + CC);\n  console.log(\"e_stat: \" + e_stat);\n  console.log(\"e_icode: \" + e_icode);\n  console.log(\"e_Cnd: \" + e_Cnd);\n  console.log(\"e_valE: \" + e_valE);\n  console.log(\"e_valA: \" + e_valA);\n  console.log(\"e_dstE: \" + e_dstE);\n  console.log(\"e_dstM: \" + e_dstM);\n  */\n}\nfunction doMemory() {\n  let stat;\n  dmem_error = false;\n  let mem_read, mem_write;\n  //long long\n  let data_in, addr;\n  let valM = VALZERO.slice();\n\n  mem_read = M_icode == IMRMOVQ || M_icode == IPOPQ || M_icode == IRET;\n  mem_write = M_icode == IRMMOVQ || M_icode == IPUSHQ || M_icode == ICALL;\n\n  addr = parseInt(valToHex(check_m_mem_addr(M_icode, M_valA, M_valE)), 16);\n  data_in = M_valA;\n\n  if (mem_read) valM = readMemory(addr, 8);\n\n  let temp = 1;\n  if (mem_write) {\n    temp = writeMemory(addr, data_in);\n  }\n  if (valM == null || temp == null) dmem_error = true;\n\n  stat = dmem_error ? SADR : M_stat;\n\n  /** Update **/\n  m_stat = stat;\n  m_icode = M_icode;\n  m_valE = M_valE.slice();\n  m_valM = valM.slice();\n  m_dstE = M_dstE;\n  m_dstM = M_dstM;\n\n  console.log(\"\");\n}\nfunction doWriteback() {\n  Stat = W_stat == SBUB ? SAOK : W_stat;\n\n  registerFile.dstE = W_dstE;\n  registerFile.dstM = W_dstM;\n  registerFile.E = W_valE.slice();\n  registerFile.M = W_valM.slice();\n}\n\nfunction doControlLogic() {\n  let mispredicted_branch = E_icode == IJXX && !e_Cnd;\n  let load_use_hazard =\n    (E_icode == IMRMOVQ || E_icode == IPOPQ) &&\n    (E_dstM == d_srcA || E_dstM == d_srcB);\n  let exception =\n    m_stat == SADR ||\n    m_stat == SINS ||\n    m_stat == SHLT ||\n    (W_stat == SADR || W_stat == SINS || W_stat == SHLT);\n\n  F_stall =\n    load_use_hazard || (D_icode == IRET || E_icode == IRET || M_icode == IRET);\n  F_bubble = false;\n\n  D_stall = load_use_hazard;\n  D_bubble =\n    (E_icode == IJXX && !e_Cnd) ||\n    (!(\n      (E_icode == IMRMOVQ || E_icode == IPOPQ) &&\n      (E_dstM == d_srcA || E_dstM == d_srcB)\n    ) &&\n      (D_icode == IRET || E_icode == IRET || M_icode == IRET));\n\n  E_stall = false;\n  E_bubble = mispredicted_branch || load_use_hazard;\n\n  W_stall = W_stat == SADR || W_stat == SINS || W_stat == SHLT;\n  W_bubble = false;\n\n  M_stall = false;\n  M_bubble =\n    W_stat == SADR ||\n    W_stat == SINS ||\n    W_stat == SHLT ||\n    (m_stat == SADR || m_stat == SINS || m_stat == SHLT);\n}\n\nfunction resetW() {\n  W_stall = false;\n  W_bubble = true;\n  W_stat = SBUB;\n  W_icode = INOP;\n  W_valE = VALZERO.slice();\n  W_valM = VALZERO.slice();\n  W_dstE = RNONE;\n  W_dstM = RNONE;\n}\nfunction resetM() {\n  M_stall = false;\n  M_bubble = true;\n  M_stat = SBUB;\n  M_icode = INOP;\n  M_valA = VALZERO.slice();\n  M_valE = VALZERO.slice();\n  M_dstE = RNONE;\n  M_dstM = RNONE;\n  M_Cnd = 0;\n}\nfunction resetE() {\n  E_stall = false;\n  E_bubble = true;\n  E_stat = SBUB;\n  E_icode = INOP;\n  E_ifun = 0;\n  E_valA = VALZERO.slice();\n  E_valB = VALZERO.slice();\n  E_valC = VALZERO.slice();\n  E_srcA = RNONE;\n  E_srcB = RNONE;\n  E_dstE = RNONE;\n  E_dstM = RNONE;\n}\n\nfunction resetD() {\n  D_stall = false;\n  D_bubble = true;\n  D_stat = SBUB;\n  D_icode = INOP;\n  D_ifun = 0;\n  D_rA = RNONE;\n  D_rB = RNONE;\n  D_valC = VALZERO.slice();\n  D_valP = VALZERO.slice();\n}\nfunction resetF() {\n  F_stall = false;\n  F_bubble = true;\n  F_predPC = VALZERO.slice();\n}\n\nfunction updateStageRegisters() {\n  if (W_bubble) {\n    resetW();\n  } else if (!W_stall) {\n    W_stat = m_stat;\n    W_icode = m_icode;\n    W_valE = m_valE.slice();\n    W_valM = m_valM.slice();\n    W_dstE = m_dstE;\n    W_dstM = m_dstM;\n  }\n\n  if (M_bubble) {\n    resetM();\n  } else if (!W_stall) {\n    M_stat = e_stat;\n    M_icode = e_icode;\n    M_valA = e_valA.slice();\n    M_valE = e_valE.slice();\n    M_dstE = e_dstE;\n    M_dstM = e_dstM;\n    M_Cnd = e_Cnd;\n  }\n\n  if (E_bubble) {\n    resetE();\n  } else if (!E_stall) {\n    E_stat = d_stat;\n    E_icode = d_icode;\n    E_ifun = d_ifun;\n    E_valA = d_valA.slice();\n    E_valB = d_valB.slice();\n    E_valC = d_valC.slice();\n    E_srcA = d_srcA;\n    E_srcB = d_srcB;\n    E_dstE = d_dstE;\n    E_dstM = d_dstM;\n  }\n\n  if (D_bubble) {\n    resetD();\n  } else if (!D_stall) {\n    D_stat = f_stat;\n    D_icode = f_icode;\n    D_ifun = f_ifun;\n    D_rA = f_rA;\n    D_rB = f_rB;\n    D_valC = f_valC.slice();\n    D_valP = f_valP.slice();\n  }\n  if (F_bubble) {\n    resetF();\n    //!no stat in regF\n  } else if (!F_stall) F_predPC = f_predPC;\n}\nfunction init() {\n  /** reset registerFile **/\n  registerFile.reset();\n\n  /** reset stage registers**/\n  resetF();\n  resetD();\n  resetE();\n  resetM();\n  resetW();\n\n  /** reset Condition Code **/\n  CC = ZF;\n\n  /** reset Stat **/\n  Stat = SAOK;\n}\n\nfunction printStageRegisters() {\n  console.log(\"[Writeback]\");\n  console.log(\n    \"stat[\" +\n      W_stat +\n      \"] icode[\" +\n      W_icode +\n      \"] valE[\" +\n      W_valE +\n      \"] valM[\" +\n      W_valM +\n      \"] dstE[\" +\n      W_dstE +\n      \"]\" +\n      \"] dstM[\" +\n      W_dstM +\n      \"]\"\n  );\n  console.log(\"[Memory]\");\n  console.log(\n    \"stat[\" +\n      M_stat +\n      \"]  icode[\" +\n      M_icode +\n      \"]  Cnd[\" +\n      M_Cnd +\n      \"]  valE[\" +\n      M_valE +\n      \"]  valA[\" +\n      M_valA +\n      \"]  dstE[\" +\n      M_dstE +\n      \"]  dstM[\" +\n      M_dstM +\n      \"]\"\n  );\n  console.log(\"[Execute]\");\n  console.log(\n    \"stat[\" +\n      E_stat +\n      \"]  icode[\" +\n      E_icode +\n      \"]  ifun[\" +\n      E_ifun +\n      \"]  valC[\" +\n      E_valC +\n      \"]  valA[\" +\n      E_valA +\n      \"]  valB[\" +\n      E_valB +\n      \"]  dstE[\" +\n      E_dstE +\n      \"]  dstM[\" +\n      E_dstM +\n      \"]  srcA[\" +\n      E_srcA +\n      \"]  srcB[\" +\n      E_srcB +\n      \"]\"\n  );\n  console.log(\"[Decode]\");\n  console.log(\n    \"stat[\" +\n      D_stat +\n      \"]  icode[\" +\n      D_icode +\n      \"]  ifun[\" +\n      D_ifun +\n      \"]  rA[\" +\n      D_rA +\n      \"]  rB[\" +\n      D_rB +\n      \"]  valC[\" +\n      D_valC +\n      \"]  valP[\" +\n      D_valP +\n      \"]\"\n  );\n  console.log(\"[Fetch]\");\n  console.log(\"predPC[\" + F_predPC + \"]\");\n}\nfunction stepi(steps) {\n  for (let i = 0; i < steps; i++) {\n    step();\n  }\n  if (Stat == SINS || Stat == SADR || Stat == SHLT) {\n    return Stat;\n  }\n  return 0;\n}\nfunction step() {\n  /** Exception **/\n\n  if (Stat == SINS || Stat == SADR || Stat == SHLT) {\n    return 1;\n  }\n  //console.log(\"clock cycle begins!\");\n  /** clock cycle begins **/\n\n  ///update the stage registers and registerFile\n  updateStageRegisters();\n  registerFile.write();\n\n  ///running pipeline\n  doWriteback();\n  doMemory();\n  doExecute();\n  doDecode();\n  doFetch();\n\n  ///update the control logic\n  doControlLogic();\n\n  /** clock cycle ends **/\n  //console.log(\"clock cycle ends\");\n  //printStageRegisters();\n  //console.log(registerFile);\n  return 0;\n}\n"]},"metadata":{},"sourceType":"module"}