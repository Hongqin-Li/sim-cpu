{"ast":null,"code":"import _classCallCheck from \"/home/lhq/Workspace/sim-cpu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lhq/Workspace/sim-cpu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar stats = [\"\", \"SAOK\", \"SADR\", \"SINS\", \"SHLT\", \"SBUB\"];\nvar icodes = [\"HALT\", \"NOP\", \"RRMOVQ\", \"IRMOVQ\", \"RMMOVQ\", \"MRMOVQ\", \"OPQ\", \"JXX\", \"CALL\", \"RET\", \"PUSHQ\", \"IPOPQ\"];\nvar regs = [\"rax\", \"rcx\", \"rdx\", \"rbx\", \"rsp\", \"rbp\", \"rsi\", \"rdi\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"\"];\nvar breakpoints = new Set();\nexport var Pipe =\n/*#__PURE__*/\nfunction () {\n  function Pipe() {\n    _classCallCheck(this, Pipe);\n\n    this.Memory = Memory;\n  }\n\n  _createClass(Pipe, [{\n    key: \"getRegisterFile\",\n    value: function getRegisterFile() {\n      var rtn = [\"\"];\n      rtn.length = 16;\n\n      for (var i = 0; i < 16; i++) {\n        rtn[i] = valToHex(registerFile.registers[i]);\n      }\n\n      return rtn;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      _init();\n\n      breakpoints.clear();\n    }\n  }, {\n    key: \"setCode\",\n    value: function setCode(str) {\n      _init();\n\n      _setCode(str); //init();\n\n    }\n  }, {\n    key: \"addBreakpoint\",\n    value: function addBreakpoint(str) {\n      breakpoints.add(str);\n    }\n  }, {\n    key: \"deleteBreakpoint\",\n    value: function deleteBreakpoint(str) {\n      breakpoints.delete(str);\n    }\n  }, {\n    key: \"hasBreakpoint\",\n    value: function hasBreakpoint(str) {\n      return breakpoints.has(str);\n    }\n  }, {\n    key: \"stepi\",\n    value: function stepi(i) {\n      return _stepi(i);\n    }\n  }, {\n    key: \"run\",\n    value: function run(time) {\n      setTimeout(function func() {\n        if (!(Stat == SINS || Stat == SADR || Stat == SHLT)) {\n          _stepi(1);\n\n          console.log(\"step\");\n          setTimeout(func, time);\n        }\n      }, time);\n    }\n  }, {\n    key: \"getPC\",\n    value: function getPC() {\n      return valToHex(F_predPC);\n    }\n  }, {\n    key: \"getStat\",\n    value: function getStat() {\n      return Stat;\n    }\n  }, {\n    key: \"getValueFromMemory\",\n    value: function getValueFromMemory(addr) {\n      var byte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n      var val = readMemory(addr, byte, 1);\n      var rtn = \"\";\n\n      for (var i = 0; i < val.length; i++) {\n        rtn += val[i];\n      }\n\n      return rtn;\n    } //return [ [addr, hex_val ],...]\n\n  }, {\n    key: \"getMemory\",\n    value: function getMemory() {\n      var rtn = [];\n      var pair = [\"addr\", \"hex_val\"];\n\n      for (var i = MAX_MEM - 8 >> 3 << 3; i >= 0; i -= 8) {\n        var x = valToHex(readMemory(i, 8, 1)); //let x = valToHex(Memory[i]);\n\n        if (x != \"0\") {\n          var j = i >> 3;\n          pair[0] = i.toString(16);\n          pair[1] = x;\n          rtn.push(pair.slice());\n        }\n      }\n\n      return rtn;\n    }\n  }, {\n    key: \"getCache\",\n    value: function getCache() {\n      var rtn = [];\n      rtn.length = cache.length;\n\n      for (var i = 0; i < cache.length; i++) {\n        rtn[i] = new Cache(cache[i].t, cache[i].s, cache[i].l);\n\n        for (var j = 0; j < cache[i].set.length; j++) {\n          for (var k = 0; k < cache[i].set[j].length; k++) {\n            rtn[i].set[j][k].tag = cache[i].set[j][k].tag;\n            rtn[i].set[j][k].valid = cache[i].set[j][k].valid;\n\n            for (var kk = 0; kk < cache[i].set[j][k].block.length; kk++) {\n              rtn[i].set[j][k].block[kk] = cache[i].set[j][k].block[kk];\n            }\n          }\n        }\n      }\n\n      return rtn; //return cache.slice();\n    }\n  }, {\n    key: \"addCache\",\n    value: function addCache() {\n      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60;\n      var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      var l = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var newCache = new Cache(t, s, l);\n      if (cache.length - 1 >= 0) cache[cache.length - 1].nextLevel = newCache;\n      cache.push(newCache);\n\n      for (var i = 0; i < cache.length; i++) {\n        cache[i].reset();\n      }\n    }\n  }, {\n    key: \"removeCache\",\n    value: function removeCache() {\n      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cache.length - 1;\n      cache[i] = null;\n      cache.splice(i, 1);\n      if (i - 1 >= 0) cache[i - 1].nextLevel = i < cache.length ? cache[i] : null;\n\n      for (var _i = 0; _i < cache.length; _i++) {\n        cache[_i].reset();\n      }\n    }\n  }, {\n    key: \"getStageStuffs\",\n    value: function getStageStuffs() {\n      return [[[\"m_stat\", stats[m_stat]], [\"m_icode\", icodes[m_icode]], [\"m_valE\", valToHex(m_valE)], [\"m_valM\", valToHex(m_valM)], [\"m_dstE\", regs[m_dstE]], [\"m_dstM\", regs[m_dstM]]], [[\"e_stat\", stats[e_stat]], [\"e_icodes\", icodes[e_icode]], [\"e_Cnd\", e_Cnd ? \"Y\" : \"N\"], [\"e_valE\", valToHex(e_valE)], [\"e_valA\", valToHex(e_valA)], [\"e_dstE\", regs[e_dstE]], [\"e_dstM\", regs[e_dstM]]], [[\"d_stat\", stats[d_stat]], [\"d_icode\", icodes[d_icode]], [\"d_ifun\", \"\" + d_ifun], [\"d_valC\", valToHex(d_valC)], [\"d_valA\", valToHex(d_valA)], [\"d_valB\", valToHex(d_valB)], [\"d_dstE\", regs[d_dstE]], [\"d_dstM\", regs[d_dstM]], [\"d_srcA\", regs[d_srcA]], [\"d_srcB\", regs[d_srcB]]], [[\"f_stat\", stats[f_stat]], [\"f_icode\", icodes[f_icode]], [\"f_ifun\", \"\" + f_ifun], [\"f_rA\", regs[f_rA]], [\"f_rB\", regs[f_rB]], [\"f_valC\", valToHex(f_valC)], [\"f_valP\", valToHex(f_valP)]], [[\"predPC\", valToHex(F_predPC)]]];\n    }\n  }, {\n    key: \"getStageRegisters\",\n    value: function getStageRegisters() {\n      return [[[\"stat\", stats[W_stat]], [\"icode\", icodes[W_icode]], [\"valE\", valToHex(W_valE)], [\"valM\", valToHex(W_valM)], [\"dstE\", regs[W_dstE]], [\"dstM\", regs[W_dstM]]], [[\"stat\", stats[M_stat]], [\"icodes\", icodes[M_icode]], [\"Cnd\", M_Cnd ? \"Y\" : \"N\"], [\"valE\", valToHex(M_valE)], [\"valA\", valToHex(M_valA)], [\"dstE\", regs[M_dstE]], [\"dstM\", regs[M_dstM]]], [[\"stat\", stats[E_stat]], [\"icode\", icodes[E_icode]], [\"ifun\", \"\" + E_ifun], [\"valC\", valToHex(E_valC)], [\"valA\", valToHex(E_valA)], [\"valB\", valToHex(E_valB)], [\"dstE\", regs[E_dstE]], [\"dstM\", regs[E_dstM]], [\"srcA\", regs[E_srcA]], [\"srcB\", regs[E_srcB]]], [[\"stat\", stats[D_stat]], [\"icode\", icodes[D_icode]], [\"ifun\", \"\" + D_ifun], [\"rA\", regs[D_rA]], [\"rB\", regs[D_rB]], [\"valC\", valToHex(D_valC)], [\"valP\", valToHex(D_valP)]], [[\"predPC\", valToHex(F_predPC)]]];\n    }\n  }]);\n\n  return Pipe;\n}(); //Guarantee that addr is int32 and s, b is small enough\n\nvar Cache =\n/*#__PURE__*/\nfunction () {\n  //l = 1 direact map\n  function Cache() {\n    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60;\n    var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    var l = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    _classCallCheck(this, Cache);\n\n    //initialization\n    this.nextLevel = null;\n    this.s = s;\n    this.S = 1 << s;\n    this.t = t;\n    this.b = 64 - t - s;\n    this.B = 1 << this.b;\n    this.l = l;\n    this.set = [];\n    this.set.length = this.S;\n\n    for (var i = 0; i < this.set.length; i++) {\n      this.set[i] = [];\n      this.set[i].length = l;\n\n      for (var j = 0; j < l; j++) {\n        this.set[i][j] = {};\n        this.set[i][j].valid = false;\n        this.set[i][j].block = [\"\"];\n        this.set[i][j].block.length = this.B;\n      }\n    }\n  }\n\n  _createClass(Cache, [{\n    key: \"reset\",\n    value: function reset() {\n      for (var i = 0; i < this.set.length; i++) {\n        for (var j = 0; j < this.set[i].length; j++) {\n          this.set[i][j].valid = false;\n        }\n      }\n    }\n  }, {\n    key: \"setNextLevel\",\n    value: function setNextLevel(L2) {\n      this.nextLevel = L2;\n    }\n  }, {\n    key: \"read\",\n    value: function read(addr) {\n      //s + b should be small\n      var t = addr >> this.s + this.b;\n      var s = addr - (t << this.s + this.b) >> this.b;\n      var b = addr - (t << this.s + this.b) - (s << this.b);\n\n      for (var _i2 = 0; _i2 < this.set[s].length; _i2++) {\n        if (this.set[s][_i2].tag == t && this.set[s][_i2].valid == true) {\n          //Hit\n          console.log(\"hit\");\n          return this.set[s][_i2].block[b];\n        }\n      } //Miss\n\n\n      console.log(\"miss\"); //Address of the first block, erase the least significant bits\n\n      var ad = addr >> this.b << this.b; //Random replacement policy: Randomly choose a line to replace\n\n      var i = parseInt(Math.random() * this.set[s].length, 10);\n      this.set[s][i].valid = true;\n      this.set[s][i].tag = t; //The bottom of Cache Hierarchy is Memory\n\n      if (!this.nextLevel) for (var j = 0; j < this.B; j++) {\n        this.set[s][i].block[j] = Memory[ad + j];\n      } else for (var _j = 0; _j < this.B; _j++) {\n        this.set[s][i].block[_j] = this.nextLevel.read(ad + _j);\n      }\n      return this.set[s][i].block[b];\n    } //Write-Through, almost the same\n\n  }, {\n    key: \"write\",\n    value: function write(addr, val) {\n      var t = addr >> this.s + this.b;\n      var s = addr - (t << this.s + this.b) >> this.b;\n      var b = addr - (t << this.s + this.b) - (s << this.b);\n\n      for (var i = 0; i < this.set[s].length; i++) {\n        if (this.set[s][i].tag == t && this.set[s][i].valid == true) {\n          //hit\n          console.log(\"hit\");\n          this.set[s][i].block[b] = val;\n          break;\n        }\n      } //No-write-allocate: When encountering a write miss, bypasses the cache and write directly to the next lower level\n\n\n      if (!this.nextLevel) Memory[addr] = val;else this.nextLevel.write(addr, val);\n    }\n  }]);\n\n  return Cache;\n}();\n/* Classes */\n\n\nvar RegisterFile =\n/*#__PURE__*/\nfunction () {\n  function RegisterFile() {\n    _classCallCheck(this, RegisterFile);\n\n    this.A = VALZERO.slice();\n    this.B = VALZERO.slice();\n    this.M = VALZERO.slice();\n    this.E = VALZERO.slice();\n    /*this.B = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    this.M = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    this.E = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    */\n\n    this.srcA = this.srcB = this.dstM = this.dstE = RNONE;\n    this.registers = [VALZERO.slice()];\n    this.registers.length = 16;\n\n    for (var i = 0; i < 16; i++) {\n      this.registers[i] = this.A;\n    }\n\n    console.log(this.registers);\n  }\n\n  _createClass(RegisterFile, [{\n    key: \"reset\",\n    value: function reset() {\n      this.A = VALZERO.slice();\n      this.B = VALZERO.slice();\n      this.M = VALZERO.slice();\n      this.E = VALZERO.slice();\n\n      for (var i = 0; i < 16; i++) {\n        this.registers[i] = VALZERO.slice();\n      }\n\n      this.srcA = this.srcB = this.dstM = this.dstE = RNONE;\n    }\n  }, {\n    key: \"read\",\n    value: function read() {\n      this.A = this.registers[this.srcA].slice();\n      this.B = this.registers[this.srcB].slice();\n    }\n  }, {\n    key: \"write\",\n    value: function write() {\n      //!caution, if dstE == dstM(!=RNONE)(e.g. pop %rsp), only to write dstM\n      this.registers[this.dstE] = this.E.slice();\n      this.registers[this.dstM] = this.M.slice();\n    }\n  }]);\n\n  return RegisterFile;\n}();\n/* Classes end */\n\n\nvar MAX_MEM = 800;\nvar IHALT = 0,\n    INOP = 1,\n    IRRMOVQ = 2,\n    IIRMOVQ = 3,\n    IRMMOVQ = 4,\n    IMRMOVQ = 5,\n    IOPQ = 6,\n    IJXX = 7,\n    ICALL = 8,\n    IRET = 9,\n    IPUSHQ = 10,\n    IPOPQ = 11;\nvar FNONE = 0;\nvar RNONE = 15,\n    RRSP = 4;\nvar ALUADD = 0;\nvar SAOK = 1,\n    SADR = 2,\n    SINS = 3,\n    SHLT = 4,\n    SBUB = 5;\nvar ZF = 4,\n    SF = 2,\n    OF = 1;\nvar VALZERO = [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"];\n/**  Stage Registers **/\n\nvar F_predPC = VALZERO.slice(),\n    F_stall,\n    F_bubble;\nvar D_stat, D_icode, D_ifun, D_rA, D_rB, D_valC, D_valP, D_stall, D_bubble;\nvar E_stat, E_icode, E_ifun, E_dstE, E_dstM, E_srcA, E_srcB, E_valA, E_valB, E_valC, E_stall, E_bubble;\nvar M_stat, M_icode, M_Cnd, M_dstE, M_dstM, M_valA, M_valE, M_stall, M_bubble;\nvar W_stat, W_icode, W_dstE, W_dstM, W_valM, W_valE, W_stall, W_bubble;\n/** Stage outputs **/\n\nvar f_predPC, f_stat, f_icode, f_ifun, f_rA, f_rB, f_valC, f_valP, f_stall, f_bubble;\nvar d_stat, d_icode, d_ifun, d_valA, d_valB, d_valC, d_dstE, d_dstM, d_srcA, d_srcB, d_stall, d_bubble;\nvar e_stat, e_icode, e_Cnd, e_dstE, e_dstM, e_valA, e_valE, e_stall, e_bubble;\nvar m_stat, m_icode, m_dstE, m_dstM, m_valM, m_valE, m_stall, m_bubble;\nvar imem_error, dmem_error;\nvar Memory = [\"0\"];\nMemory.length = MAX_MEM;\n/*\n\nlet L1Cache = new Cache();\nlet L2Cache = new Cache();\n\nL1Cache.setNextLevel(L2Cache);\n*/\n\nvar cache = []; //cache.push(L1Cache);\n//cache.push(L2Cache);\n\nvar registerFile = new RegisterFile();\nvar alu_cc;\nvar set_cc;\nvar CC;\nvar Stat; //everything named val is stored by string array ,each byte\n//should be positive;\n\nfunction intToVal(x) {\n  var rtn = VALZERO.slice();\n  rtn.length = 8;\n\n  for (var i = 0; i < 8; i++) {\n    var temp = x & 0xff;\n    rtn[i] = temp.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n    x >>= 8;\n  }\n\n  return rtn;\n}\n/* return string */\n\n\nfunction valToHex(val) {\n  if (val == undefined) return \"0\";\n  var rtn = \"\";\n  var zero_front = true;\n  var i = 7;\n\n  while (i >= 0 && parseInt(val[i], 16) == 0) {\n    i--;\n  }\n\n  if (i < 0) return \"0\";\n  if (val[i][0] != \"0\") rtn += val[i][0];\n  rtn += val[i][1];\n\n  for (var j = i - 1; j >= 0; j--) {\n    rtn += val[j][0] + val[j][1];\n  }\n\n  return rtn;\n} //return a val\n\n\nfunction addq(valA, valB) {\n  var rtn = VALZERO.slice();\n  rtn.length = 8;\n  var carry = 0;\n\n  for (var i = 0; i < 8; i++) {\n    var int_sum = parseInt(valA[i], 16) + parseInt(valB[i], 16) + carry;\n    carry = int_sum >> 8;\n    var s = int_sum & 0xff;\n    var str_s = s.toString(16);\n    if (str_s.length == 1) rtn[i] = \"0\" + str_s;else rtn[i] = str_s;\n  } //overflow\n  //if (carry) console.log(\"overflow\");\n\n\n  return rtn;\n}\n\nfunction subq(valA, valB) {\n  var rtn = VALZERO.slice();\n  var notB = xorq(valB, [\"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\"]);\n  return addq(valA, addq(notB, [\"01\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"]));\n}\n\nfunction andq(valA, valB) {\n  var rtn = VALZERO.slice();\n  rtn.length = 8;\n\n  for (var i = 0; i < 8; i++) {\n    var s = parseInt(valA[i], 16) & parseInt(valB[i], 16) & 0xff;\n    rtn[i] = s.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n  }\n\n  return rtn;\n}\n\nfunction xorq(valA, valB) {\n  var rtn = VALZERO.slice();\n  rtn.length = 8;\n\n  for (var i = 0; i < 8; i++) {\n    var s = (parseInt(valA[i], 16) ^ parseInt(valB[i], 16)) & 0xff;\n    rtn[i] = s.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n  }\n\n  return rtn;\n}\n/* read eight bytes from memory, return null when error*/\n\n/* return rtn = [\"00\", \"02\", ...] */\n\n/* opt = 0, read from cache, opt = 1, read directly from memory*/\n\n\nfunction readMemory(addr) {\n  var bytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (addr + bytes > MAX_MEM || addr < 0) {\n    return null;\n  }\n\n  var rtn = VALZERO.slice();\n  rtn.length = bytes;\n\n  for (var i = 0; i < bytes; i++) {\n    rtn[i] = opt == 0 && cache.length > 0 ? cache[0].read(addr + i) : Memory[addr + i]; //read cache\n    //rtn[i] = Memory[addr + i];\n\n    if (rtn[i] == undefined) rtn[i] = \"00\";\n  }\n\n  return rtn;\n}\n/* write val into memory e.g. val = [\"00\", \"01\"]*/\n\n\nfunction writeMemory(addr, val) {\n  var len = val.length;\n  if (addr + len > MAX_MEM || addr < 0) return null;\n\n  for (var i = 0; i < len; i++) {\n    if (cache.length > 0) cache[0].write(addr + i, val[i]);else Memory[addr + i] = val[i];\n  }\n\n  return true;\n}\n\nfunction _setCode(code) {\n  var isValid = true;\n\n  for (var i = 0; i < code.length; i++) {\n    if (code[i] == \"\\n\") {\n      isValid = true;\n      continue;\n    }\n\n    if (isValid && i + 2 < code.length && code[i] == \"0\" && code[i + 1] == \"x\") {\n      isValid = false;\n      var hex_addr = \"\";\n      var addr = void 0;\n      i++; //console.log(\"find it\" + code[i + 2] + code[i + 3] + code[i + 4]);\n\n      while (code[++i] == \"0\") {}\n\n      while (code[i] != \":\") {\n        hex_addr += code[i++];\n      }\n\n      addr = parseInt(hex_addr, 16);\n\n      if (isNaN(addr)) {\n        addr = 0;\n      }\n\n      i += 2;\n      var j = void 0;\n\n      for (j = 0; i + j < code.length && code[i + j] != \" \"; j = j + 2) {\n        Memory[addr + (j >> 1)] = code[i + j];\n        Memory[addr + (j >> 1)] += code[i + j + 1];\n      }\n\n      i += j - 1;\n    } else isValid = false;\n  }\n}\n\nfunction ops(a, b, ifun) {\n  var rtn;\n\n  switch (ifun) {\n    case 0:\n      rtn = addq(a, b);\n      break;\n\n    case 1:\n      rtn = subq(a, b);\n      break;\n\n    case 2:\n      rtn = andq(a, b);\n      break;\n\n    case 3:\n      rtn = xorq(a, b);\n      break;\n\n    default:\n      rtn = null;\n      break;\n  }\n\n  var rtn_sign = parseInt(rtn[7], 16) >> 7;\n  var a_sign = parseInt(a[7], 16) >> 7;\n  var b_sign = parseInt(b[7], 16) >> 7;\n  alu_cc = 0;\n  if (parseInt(valToHex(rtn), 16) == 0) alu_cc |= ZF;\n  if (rtn_sign == 1) alu_cc |= SF;\n  if (a_sign == b_sign && rtn_sign != a_sign) alu_cc |= OF;\n  return rtn;\n}\n/* long long */\n\n\nfunction check_f_pc() {\n  //!Mispredicted branch. Fetch at incremented PC\n  if (M_icode == IJXX && !M_Cnd) return M_valA; //!Completion of RET instruction\n  else if (W_icode == IRET) return W_valM; //!Default: Use predicted P\n    else return F_predPC;\n} // return bool\n\n\nfunction check_f_instr_valid(icode, ifun) {\n  switch (icode) {\n    case IJXX:\n    case IRRMOVQ:\n      return ifun < 7;\n\n    case IOPQ:\n      return ifun < 4;\n\n    default:\n      return ifun < 1;\n  }\n} //return bool\n\n\nfunction check_f_need_regids(icode) {\n  switch (icode) {\n    case IHALT:\n    case INOP:\n    case IJXX:\n    case ICALL:\n    case IRET:\n      return false;\n\n    default:\n      return true;\n  }\n} //return bool\n\n\nfunction check_f_need_valC(icode) {\n  switch (icode) {\n    case IIRMOVQ:\n    case IRMMOVQ:\n    case IMRMOVQ:\n    case IJXX:\n    case ICALL:\n      return true;\n\n    default:\n      return false;\n  }\n} //return int\n\n\nfunction check_f_stat(imem_error, instr_valid, icode) {\n  if (imem_error == true) return SADR;else if (!instr_valid == true) return SINS;else if (icode == IHALT) return SHLT;else return SAOK;\n} //return int\n\n\nfunction check_d_srcA() {\n  switch (D_icode) {\n    case IRRMOVQ:\n    case IRMMOVQ:\n    case IOPQ:\n    case IPUSHQ:\n      return D_rA;\n\n    case IPOPQ:\n    case IRET:\n      return RRSP;\n\n    default:\n      return RNONE;\n  }\n} //return  int\n\n\nfunction check_d_srcB() {\n  switch (D_icode) {\n    case IMRMOVQ:\n    case IRMMOVQ:\n    case IOPQ:\n      return D_rB;\n\n    case IPUSHQ:\n    case IPOPQ:\n    case ICALL:\n    case IRET:\n      return RRSP;\n\n    default:\n      return RNONE;\n  }\n} //return int\n\n\nfunction check_d_dstM() {\n  switch (D_icode) {\n    case IMRMOVQ:\n    case IPOPQ:\n      return D_rA;\n\n    default:\n      return RNONE;\n  }\n} //return int\n\n\nfunction check_d_dstE() {\n  switch (D_icode) {\n    case IRRMOVQ: //condition move\n\n    case IIRMOVQ:\n    case IOPQ:\n      return D_rB;\n\n    case IPUSHQ:\n    case IPOPQ:\n    case ICALL:\n    case IRET:\n      return RRSP;\n\n    default:\n      return RNONE;\n  }\n} //return long long(long long d_rvalA)\n\n\nfunction check_d_valA(d_srcA, d_rvalA) {\n  if (D_icode == ICALL || D_icode == IJXX) {\n    return D_valP;\n  } else if (d_srcA == e_dstE) {\n    return e_valE;\n  } else if (d_srcA == M_dstM) {\n    return m_valM;\n  } else if (d_srcA == M_dstE) {\n    return M_valE;\n  } else if (d_srcA == W_dstM) {\n    return W_valM;\n  } else if (d_srcA == W_dstE) {\n    return W_valE;\n  } else return d_rvalA;\n} //return long long(long long d_rvalB)\n\n\nfunction check_d_valB(d_srcB, d_rvalB) {\n  if (d_srcB == e_dstE) {\n    return e_valE;\n  } else if (d_srcB == M_dstM) {\n    return m_valM;\n  } else if (d_srcB == M_dstE) {\n    return M_valE;\n  } else if (d_srcB == W_dstM) {\n    return W_valM;\n  } else if (d_srcB == W_dstE) {\n    return W_valE;\n  } else return d_rvalB;\n} //long long: return, valA, valC\n\n\nfunction check_e_aluA(icode, valA, valC) {\n  switch (icode) {\n    case IRRMOVQ:\n    case IOPQ:\n      return valA;\n\n    case IIRMOVQ:\n    case IRMMOVQ:\n    case IMRMOVQ:\n      return valC;\n\n    case ICALL:\n    case IPUSHQ:\n      return [\"f8\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\"];\n    //subq(VALZERO.slice());\n\n    case IRET:\n    case IPOPQ:\n      return [\"08\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"];\n    //other operation don't need aluB\n\n    default:\n      return VALZERO;\n  }\n} //long long: return, valB, valC\n\n\nfunction check_e_aluB(icode, valB, valC) {\n  switch (icode) {\n    case IRMMOVQ:\n    case IMRMOVQ:\n    case IOPQ:\n    case ICALL:\n    case IPUSHQ:\n    case IRET:\n    case IPOPQ:\n      return valB;\n\n    case IRRMOVQ:\n    case IIRMOVQ:\n      return VALZERO;\n    //other operation don't need aluB\n\n    default:\n      return VALZERO;\n  }\n} //long long: return, a, b, t\n//!alu_cc global, modify it also\n\n\nfunction check_e_valE(alufun, valA, valB) {\n  return ops(valA, valB, alufun);\n} //return bool\n\n/************ modify it ***********/\n\n\nfunction check_e_cond(ifun) {\n  switch (ifun) {\n    case 1:\n      return CC & (ZF | SF);\n\n    case 2:\n      return CC & SF;\n\n    case 3:\n      return CC & ZF;\n\n    case 4:\n      return !(CC & ZF);\n\n    case 5:\n      return !(CC & SF);\n\n    case 6:\n      return !(CC & (ZF | SF));\n\n    default:\n      return true;\n  }\n} //long long: return, valA, valE\n\n\nfunction check_m_mem_addr(icode, valA, valE) {\n  switch (icode) {\n    case IRMMOVQ:\n    case IPUSHQ:\n    case ICALL:\n    case IMRMOVQ:\n      return valE;\n\n    case IPOPQ:\n    case IRET:\n      return valA;\n\n    default:\n      return VALZERO;\n  }\n}\n\nfunction doFetch() {\n  /* Stage values */\n  //bool\n  var instr_valid, need_regids, need_valC; //let imem_error;\n\n  var stat;\n  /* should be long long */\n\n  var pc;\n  var predPC;\n  var valC, valP; //int\n\n  var split, align;\n  var icode, ifun;\n  var rA, rB;\n  /** Select PC **/\n  //now pc is a int\n\n  pc = parseInt(valToHex(check_f_pc()), 16); //console.log(\"pc is\" + pc);\n\n  /** Fetch **/\n\n  split = readMemory(pc, 1);\n  align = readMemory(pc + 1, 1); //console.log(split);\n  //console.log(align);\n\n  icode = parseInt(split[0][0], 16);\n  ifun = parseInt(split[0][1], 16); //console.log(\"icode: \" + icode + \", ifun\" + ifun);\n  //bool\n\n  instr_valid = check_f_instr_valid(icode, ifun);\n  need_regids = check_f_need_regids(icode);\n  need_valC = check_f_need_valC(icode); //console.log(need_regids);\n\n  stat = check_f_stat(imem_error, instr_valid, icode);\n  rA = need_regids ? parseInt(align[0][0], 16) : RNONE;\n  rB = need_regids ? parseInt(align[0][1], 16) : RNONE;\n  valC = need_valC ? readMemory(pc + 1 + need_regids) : VALZERO.slice();\n  valP = intToVal(pc + 1 + need_regids + (need_valC << 3));\n  predPC = icode == IJXX || icode == ICALL ? intToVal(parseInt(valToHex(valC), 16)) : valP;\n  /** Update **/\n\n  f_stat = stat;\n  f_icode = icode;\n  f_ifun = ifun;\n  f_rA = rA;\n  f_rB = rB;\n  f_valC = valC.slice();\n  f_valP = valP.slice();\n  f_predPC = predPC.slice();\n  /*\n  console.log(\"f_stat: \" + f_stat);\n  console.log(\"f_icode: \" + f_icode);\n  console.log(\"f_ifun: \" + f_ifun);\n  console.log(\"f_rA: \" + f_rA);\n  console.log(\"f_rB:\" + f_rB);\n   console.log(\"f_valC: \" + f_valC);\n  console.log(\"f_valP: \" + f_valP);\n  console.log(\"f_predPC: \" + f_predPC);*/\n}\n\nfunction doDecode() {\n  var stat;\n  var rvalA, rvalB;\n  var dstE, dstM;\n  var valA, valB;\n  var srcA, srcB;\n  dstE = check_d_dstE();\n  dstM = check_d_dstM();\n  srcA = check_d_srcA();\n  srcB = check_d_srcB();\n  registerFile.srcA = srcA;\n  registerFile.srcB = srcB; ///read registerFile as if it were a combinational logic\n  ///i.e. update the read port A B immediately.\n\n  registerFile.read(); //should not be modified;\n\n  rvalA = registerFile.A;\n  rvalB = registerFile.B;\n  /** Sel + Fwd A and Fwd B **/\n\n  valA = check_d_valA(srcA, rvalA);\n  valB = check_d_valB(srcB, rvalB);\n  /** Update **/\n\n  Stat = W_stat == SBUB ? SAOK : W_stat;\n  d_stat = D_stat;\n  d_icode = D_icode;\n  d_ifun = D_ifun;\n  d_valC = D_valC.slice();\n  d_valA = valA.slice();\n  d_valB = valB.slice();\n  d_dstE = dstE;\n  d_dstM = dstM;\n  d_srcA = srcA;\n  d_srcB = srcB;\n  /** print **/\n\n  console.log(\"d_stat: \" + d_stat);\n  console.log(\"d_icode: \" + d_icode);\n  console.log(\"d_ifun: \" + d_ifun);\n  console.log(\"d_valC: \" + d_valC);\n  console.log(\"d_valA: \" + d_valA);\n  console.log(\"d_valB: \" + d_valB);\n  console.log(\"d_dstE: \" + d_dstE);\n  return 0;\n}\n\nfunction doExecute() {\n  //alu_cc;//!cc from alu\n  var cond;\n  var alufun;\n  var dstE;\n  var aluA, aluB;\n  var valE;\n  alufun = E_icode == IOPQ ? E_ifun : ALUADD;\n  aluA = check_e_aluA(E_icode, E_valA, E_valC);\n  aluB = check_e_aluB(E_icode, E_valB, E_valC);\n  set_cc = E_icode == IOPQ && !(m_stat == SADR || m_stat == SINS || m_stat == SHLT || W_stat == SADR || W_stat == SINS || W_stat == SHLT); //!also update alu_cc\n\n  valE = ops(aluB, aluA, alufun);\n  cond = !!check_e_cond(E_ifun); //!update dstE according to condition codes\n\n  dstE = E_icode == IRRMOVQ ? cond ? E_dstE : RNONE : E_dstE;\n  /** Update **/\n\n  if (set_cc) {\n    CC = alu_cc;\n    console.log(\"updateCC: \" + CC);\n  }\n\n  e_stat = E_stat;\n  e_icode = E_icode;\n  e_Cnd = cond;\n  e_valE = valE.slice();\n  e_valA = E_valA.slice();\n  e_dstE = dstE;\n  e_dstM = E_dstM;\n  /*\n  console.log(\"CC: \" + CC);\n  console.log(\"e_stat: \" + e_stat);\n  console.log(\"e_icode: \" + e_icode);\n  console.log(\"e_Cnd: \" + e_Cnd);\n  console.log(\"e_valE: \" + e_valE);\n  console.log(\"e_valA: \" + e_valA);\n  console.log(\"e_dstE: \" + e_dstE);\n  console.log(\"e_dstM: \" + e_dstM);\n  */\n}\n\nfunction doMemory() {\n  var stat;\n  dmem_error = false;\n  var mem_read, mem_write; //long long\n\n  var data_in, addr;\n  var valM = VALZERO.slice();\n  mem_read = M_icode == IMRMOVQ || M_icode == IPOPQ || M_icode == IRET;\n  mem_write = M_icode == IRMMOVQ || M_icode == IPUSHQ || M_icode == ICALL;\n  addr = parseInt(valToHex(check_m_mem_addr(M_icode, M_valA, M_valE)), 16);\n  data_in = M_valA;\n  if (mem_read) valM = readMemory(addr, 8);\n  var temp = 1;\n\n  if (mem_write) {\n    temp = writeMemory(addr, data_in);\n  }\n\n  if (valM == null || temp == null) dmem_error = true;\n  stat = dmem_error ? SADR : M_stat;\n  /** Update **/\n\n  m_stat = stat;\n  m_icode = M_icode;\n  m_valE = M_valE.slice();\n  m_valM = valM.slice();\n  m_dstE = M_dstE;\n  m_dstM = M_dstM;\n  console.log(\"\");\n}\n\nfunction doWriteback() {\n  Stat = W_stat == SBUB ? SAOK : W_stat;\n  registerFile.dstE = W_dstE;\n  registerFile.dstM = W_dstM;\n  registerFile.E = W_valE.slice();\n  registerFile.M = W_valM.slice();\n}\n\nfunction doControlLogic() {\n  var mispredicted_branch = E_icode == IJXX && !e_Cnd;\n  var load_use_hazard = (E_icode == IMRMOVQ || E_icode == IPOPQ) && (E_dstM == d_srcA || E_dstM == d_srcB);\n  var exception = m_stat == SADR || m_stat == SINS || m_stat == SHLT || W_stat == SADR || W_stat == SINS || W_stat == SHLT;\n  F_stall = load_use_hazard || D_icode == IRET || E_icode == IRET || M_icode == IRET;\n  F_bubble = false;\n  D_stall = load_use_hazard;\n  D_bubble = E_icode == IJXX && !e_Cnd || !((E_icode == IMRMOVQ || E_icode == IPOPQ) && (E_dstM == d_srcA || E_dstM == d_srcB)) && (D_icode == IRET || E_icode == IRET || M_icode == IRET);\n  E_stall = false;\n  E_bubble = mispredicted_branch || load_use_hazard;\n  W_stall = W_stat == SADR || W_stat == SINS || W_stat == SHLT;\n  W_bubble = false;\n  M_stall = false;\n  M_bubble = W_stat == SADR || W_stat == SINS || W_stat == SHLT || m_stat == SADR || m_stat == SINS || m_stat == SHLT;\n}\n\nfunction resetW() {\n  W_stall = false;\n  W_bubble = true;\n  W_stat = SBUB;\n  W_icode = INOP;\n  W_valE = VALZERO.slice();\n  W_valM = VALZERO.slice();\n  W_dstE = RNONE;\n  W_dstM = RNONE;\n}\n\nfunction resetM() {\n  M_stall = false;\n  M_bubble = true;\n  M_stat = SBUB;\n  M_icode = INOP;\n  M_valA = VALZERO.slice();\n  M_valE = VALZERO.slice();\n  M_dstE = RNONE;\n  M_dstM = RNONE;\n  M_Cnd = 0;\n}\n\nfunction resetE() {\n  E_stall = false;\n  E_bubble = true;\n  E_stat = SBUB;\n  E_icode = INOP;\n  E_ifun = 0;\n  E_valA = VALZERO.slice();\n  E_valB = VALZERO.slice();\n  E_valC = VALZERO.slice();\n  E_srcA = RNONE;\n  E_srcB = RNONE;\n  E_dstE = RNONE;\n  E_dstM = RNONE;\n}\n\nfunction resetD() {\n  D_stall = false;\n  D_bubble = true;\n  D_stat = SBUB;\n  D_icode = INOP;\n  D_ifun = 0;\n  D_rA = RNONE;\n  D_rB = RNONE;\n  D_valC = VALZERO.slice();\n  D_valP = VALZERO.slice();\n}\n\nfunction resetF() {\n  F_stall = false;\n  F_bubble = true;\n  F_predPC = VALZERO.slice();\n}\n\nfunction updateStageRegisters() {\n  if (W_bubble) {\n    resetW();\n  } else if (!W_stall) {\n    W_stat = m_stat;\n    W_icode = m_icode;\n    W_valE = m_valE.slice();\n    W_valM = m_valM.slice();\n    W_dstE = m_dstE;\n    W_dstM = m_dstM;\n  }\n\n  if (M_bubble) {\n    resetM();\n  } else if (!W_stall) {\n    M_stat = e_stat;\n    M_icode = e_icode;\n    M_valA = e_valA.slice();\n    M_valE = e_valE.slice();\n    M_dstE = e_dstE;\n    M_dstM = e_dstM;\n    M_Cnd = e_Cnd;\n  }\n\n  if (E_bubble) {\n    resetE();\n  } else if (!E_stall) {\n    E_stat = d_stat;\n    E_icode = d_icode;\n    E_ifun = d_ifun;\n    E_valA = d_valA.slice();\n    E_valB = d_valB.slice();\n    E_valC = d_valC.slice();\n    E_srcA = d_srcA;\n    E_srcB = d_srcB;\n    E_dstE = d_dstE;\n    E_dstM = d_dstM;\n  }\n\n  if (D_bubble) {\n    resetD();\n  } else if (!D_stall) {\n    D_stat = f_stat;\n    D_icode = f_icode;\n    D_ifun = f_ifun;\n    D_rA = f_rA;\n    D_rB = f_rB;\n    D_valC = f_valC.slice();\n    D_valP = f_valP.slice();\n  }\n\n  if (F_bubble) {\n    resetF(); //!no stat in regF\n  } else if (!F_stall) F_predPC = f_predPC;\n}\n\nfunction _init() {\n  /* reset memory */\n  Memory = [\"0\"];\n  Memory.length = MAX_MEM;\n  /* reset the caches */\n\n  for (var i = 0; i < cache.length; i++) {\n    cache[i].reset();\n  }\n  /** reset registerFile **/\n\n\n  registerFile.reset();\n  /** reset stage registers**/\n\n  resetF();\n  resetD();\n  resetE();\n  resetM();\n  resetW();\n  /** reset Condition Code **/\n\n  CC = ZF;\n  /** reset Stat **/\n\n  Stat = SAOK;\n}\n\nfunction printStageRegisters() {\n  console.log(\"[Writeback]\");\n  console.log(\"stat[\" + W_stat + \"] icode[\" + W_icode + \"] valE[\" + W_valE + \"] valM[\" + W_valM + \"] dstE[\" + W_dstE + \"]\" + \"] dstM[\" + W_dstM + \"]\");\n  console.log(\"[Memory]\");\n  console.log(\"stat[\" + M_stat + \"]  icode[\" + M_icode + \"]  Cnd[\" + M_Cnd + \"]  valE[\" + M_valE + \"]  valA[\" + M_valA + \"]  dstE[\" + M_dstE + \"]  dstM[\" + M_dstM + \"]\");\n  console.log(\"[Execute]\");\n  console.log(\"stat[\" + E_stat + \"]  icode[\" + E_icode + \"]  ifun[\" + E_ifun + \"]  valC[\" + E_valC + \"]  valA[\" + E_valA + \"]  valB[\" + E_valB + \"]  dstE[\" + E_dstE + \"]  dstM[\" + E_dstM + \"]  srcA[\" + E_srcA + \"]  srcB[\" + E_srcB + \"]\");\n  console.log(\"[Decode]\");\n  console.log(\"stat[\" + D_stat + \"]  icode[\" + D_icode + \"]  ifun[\" + D_ifun + \"]  rA[\" + D_rA + \"]  rB[\" + D_rB + \"]  valC[\" + D_valC + \"]  valP[\" + D_valP + \"]\");\n  console.log(\"[Fetch]\");\n  console.log(\"predPC[\" + F_predPC + \"]\");\n}\n\nfunction _stepi(steps) {\n  for (var i = 0; i < steps; i++) {\n    step();\n  }\n\n  if (Stat == SINS || Stat == SADR || Stat == SHLT) {\n    return Stat;\n  }\n\n  return 0;\n}\n\nfunction step() {\n  /** Exception **/\n  if (Stat == SINS || Stat == SADR || Stat == SHLT) {\n    return 1;\n  } //console.log(\"clock cycle begins!\");\n\n  /** clock cycle begins **/\n  ///update the stage registers and registerFile\n\n\n  updateStageRegisters();\n  registerFile.write(); ///running pipeline\n\n  doWriteback();\n  doMemory();\n  doExecute();\n  doDecode();\n  doFetch(); ///update the control logic\n\n  doControlLogic();\n  /** clock cycle ends **/\n  //console.log(\"clock cycle ends\");\n  //printStageRegisters();\n  //console.log(registerFile);\n\n  return 0;\n}","map":{"version":3,"sources":["/home/lhq/Workspace/sim-cpu/src/pipe.js"],"names":["stats","icodes","regs","breakpoints","Set","Pipe","Memory","rtn","length","i","valToHex","registerFile","registers","init","clear","str","setCode","add","delete","has","stepi","time","setTimeout","func","Stat","SINS","SADR","SHLT","console","log","F_predPC","addr","byte","val","readMemory","pair","MAX_MEM","x","j","toString","push","slice","cache","Cache","t","s","l","set","k","tag","valid","kk","block","newCache","nextLevel","reset","splice","m_stat","m_icode","m_valE","m_valM","m_dstE","m_dstM","e_stat","e_icode","e_Cnd","e_valE","e_valA","e_dstE","e_dstM","d_stat","d_icode","d_ifun","d_valC","d_valA","d_valB","d_dstE","d_dstM","d_srcA","d_srcB","f_stat","f_icode","f_ifun","f_rA","f_rB","f_valC","f_valP","W_stat","W_icode","W_valE","W_valM","W_dstE","W_dstM","M_stat","M_icode","M_Cnd","M_valE","M_valA","M_dstE","M_dstM","E_stat","E_icode","E_ifun","E_valC","E_valA","E_valB","E_dstE","E_dstM","E_srcA","E_srcB","D_stat","D_icode","D_ifun","D_rA","D_rB","D_valC","D_valP","S","b","B","L2","ad","parseInt","Math","random","read","write","RegisterFile","A","VALZERO","M","E","srcA","srcB","dstM","dstE","RNONE","IHALT","INOP","IRRMOVQ","IIRMOVQ","IRMMOVQ","IMRMOVQ","IOPQ","IJXX","ICALL","IRET","IPUSHQ","IPOPQ","FNONE","RRSP","ALUADD","SAOK","SBUB","ZF","SF","OF","F_stall","F_bubble","D_stall","D_bubble","E_stall","E_bubble","M_stall","M_bubble","W_stall","W_bubble","f_predPC","f_stall","f_bubble","d_stall","d_bubble","e_stall","e_bubble","m_stall","m_bubble","imem_error","dmem_error","alu_cc","set_cc","CC","intToVal","temp","undefined","zero_front","addq","valA","valB","carry","int_sum","str_s","subq","notB","xorq","andq","bytes","opt","writeMemory","len","code","isValid","hex_addr","isNaN","ops","a","ifun","rtn_sign","a_sign","b_sign","check_f_pc","check_f_instr_valid","icode","check_f_need_regids","check_f_need_valC","check_f_stat","instr_valid","check_d_srcA","check_d_srcB","check_d_dstM","check_d_dstE","check_d_valA","d_rvalA","check_d_valB","d_rvalB","check_e_aluA","valC","check_e_aluB","check_e_valE","alufun","check_e_cond","check_m_mem_addr","valE","doFetch","need_regids","need_valC","stat","pc","predPC","valP","split","align","rA","rB","doDecode","rvalA","rvalB","doExecute","cond","aluA","aluB","doMemory","mem_read","mem_write","data_in","valM","doWriteback","doControlLogic","mispredicted_branch","load_use_hazard","exception","resetW","resetM","resetE","resetD","resetF","updateStageRegisters","printStageRegisters","steps","step"],"mappings":"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","sourcesContent":["const stats = [\"\", \"SAOK\", \"SADR\", \"SINS\", \"SHLT\", \"SBUB\"];\nconst icodes = [\n  \"HALT\",\n  \"NOP\",\n  \"RRMOVQ\",\n  \"IRMOVQ\",\n  \"RMMOVQ\",\n  \"MRMOVQ\",\n  \"OPQ\",\n  \"JXX\",\n  \"CALL\",\n  \"RET\",\n  \"PUSHQ\",\n  \"IPOPQ\"\n];\nconst regs = [\n  \"rax\",\n  \"rcx\",\n  \"rdx\",\n  \"rbx\",\n  \"rsp\",\n  \"rbp\",\n  \"rsi\",\n  \"rdi\",\n  \"r8\",\n  \"r9\",\n  \"r10\",\n  \"r11\",\n  \"r12\",\n  \"r13\",\n  \"r14\",\n  \"\"\n];\n\nlet breakpoints = new Set();\n\nexport class Pipe {\n  constructor() {\n    this.Memory = Memory;\n  }\n  getRegisterFile() {\n    let rtn = [\"\"];\n    rtn.length = 16;\n    for (let i = 0; i < 16; i++) {\n      rtn[i] = valToHex(registerFile.registers[i]);\n    }\n    return rtn;\n  }\n  init() {\n    init();\n    breakpoints.clear();\n  }\n  setCode(str) {\n    init();\n    setCode(str);\n    //init();\n  }\n  addBreakpoint(str) {\n    breakpoints.add(str);\n  }\n  deleteBreakpoint(str) {\n    breakpoints.delete(str);\n  }\n  hasBreakpoint(str) {\n    return breakpoints.has(str);\n  }\n\n  stepi(i) {\n    return stepi(i);\n  }\n  run(time) {\n    setTimeout(function func() {\n      if (!(Stat == SINS || Stat == SADR || Stat == SHLT)) {\n        stepi(1);\n        console.log(\"step\");\n        setTimeout(func, time);\n      }\n    }, time);\n  }\n  getPC() {\n    return valToHex(F_predPC);\n  }\n  getStat() {\n    return Stat;\n  }\n  getValueFromMemory(addr, byte = 8) {\n    let val = readMemory(addr, byte, 1);\n    let rtn = \"\";\n    for (let i = 0; i < val.length; i++) {\n      rtn += val[i];\n    }\n    return rtn;\n  }\n  //return [ [addr, hex_val ],...]\n  getMemory() {\n    let rtn = [];\n    let pair = [\"addr\", \"hex_val\"];\n    for (let i = ((MAX_MEM - 8) >> 3) << 3; i >= 0; i -= 8) {\n      let x = valToHex(readMemory(i, 8, 1));\n      //let x = valToHex(Memory[i]);\n\n      if (x != \"0\") {\n        let j = i >> 3;\n        pair[0] = i.toString(16);\n        pair[1] = x;\n        rtn.push(pair.slice());\n      }\n    }\n    return rtn;\n  }\n\n  getCache() {\n    let rtn = [];\n    rtn.length = cache.length;\n    for (let i = 0; i < cache.length; i++) {\n      rtn[i] = new Cache(cache[i].t, cache[i].s, cache[i].l);\n      for (let j = 0; j < cache[i].set.length; j++) {\n        for (let k = 0; k < cache[i].set[j].length; k++) {\n          rtn[i].set[j][k].tag = cache[i].set[j][k].tag;\n          rtn[i].set[j][k].valid = cache[i].set[j][k].valid;\n          for (let kk = 0; kk < cache[i].set[j][k].block.length; kk++) {\n            rtn[i].set[j][k].block[kk] = cache[i].set[j][k].block[kk];\n          }\n        }\n      }\n    }\n    return rtn;\n    //return cache.slice();\n  }\n  addCache(t = 60, s = 2, l = 1) {\n    let newCache = new Cache(t, s, l);\n    if (cache.length - 1 >= 0) cache[cache.length - 1].nextLevel = newCache;\n    cache.push(newCache);\n    for (let i = 0; i < cache.length; i++) {\n      cache[i].reset();\n    }\n  }\n  removeCache(i = cache.length - 1) {\n    cache[i] = null;\n    cache.splice(i, 1);\n    if (i - 1 >= 0) cache[i - 1].nextLevel = i < cache.length ? cache[i] : null;\n    for (let i = 0; i < cache.length; i++) {\n      cache[i].reset();\n    }\n  }\n\n  getStageStuffs() {\n    return [\n      [\n        [\"m_stat\", stats[m_stat]],\n        [\"m_icode\", icodes[m_icode]],\n        [\"m_valE\", valToHex(m_valE)],\n        [\"m_valM\", valToHex(m_valM)],\n        [\"m_dstE\", regs[m_dstE]],\n        [\"m_dstM\", regs[m_dstM]]\n      ],\n      [\n        [\"e_stat\", stats[e_stat]],\n        [\"e_icodes\", icodes[e_icode]],\n        [\"e_Cnd\", e_Cnd ? \"Y\" : \"N\"],\n        [\"e_valE\", valToHex(e_valE)],\n        [\"e_valA\", valToHex(e_valA)],\n        [\"e_dstE\", regs[e_dstE]],\n        [\"e_dstM\", regs[e_dstM]]\n      ],\n      [\n        [\"d_stat\", stats[d_stat]],\n        [\"d_icode\", icodes[d_icode]],\n        [\"d_ifun\", \"\" + d_ifun],\n        [\"d_valC\", valToHex(d_valC)],\n        [\"d_valA\", valToHex(d_valA)],\n        [\"d_valB\", valToHex(d_valB)],\n        [\"d_dstE\", regs[d_dstE]],\n        [\"d_dstM\", regs[d_dstM]],\n        [\"d_srcA\", regs[d_srcA]],\n        [\"d_srcB\", regs[d_srcB]]\n      ],\n      [\n        [\"f_stat\", stats[f_stat]],\n        [\"f_icode\", icodes[f_icode]],\n        [\"f_ifun\", \"\" + f_ifun],\n        [\"f_rA\", regs[f_rA]],\n        [\"f_rB\", regs[f_rB]],\n        [\"f_valC\", valToHex(f_valC)],\n        [\"f_valP\", valToHex(f_valP)]\n      ],\n      [[\"predPC\", valToHex(F_predPC)]]\n    ];\n  }\n\n  getStageRegisters() {\n    return [\n      [\n        [\"stat\", stats[W_stat]],\n        [\"icode\", icodes[W_icode]],\n        [\"valE\", valToHex(W_valE)],\n        [\"valM\", valToHex(W_valM)],\n        [\"dstE\", regs[W_dstE]],\n        [\"dstM\", regs[W_dstM]]\n      ],\n      [\n        [\"stat\", stats[M_stat]],\n        [\"icodes\", icodes[M_icode]],\n        [\"Cnd\", M_Cnd ? \"Y\" : \"N\"],\n        [\"valE\", valToHex(M_valE)],\n        [\"valA\", valToHex(M_valA)],\n        [\"dstE\", regs[M_dstE]],\n        [\"dstM\", regs[M_dstM]]\n      ],\n      [\n        [\"stat\", stats[E_stat]],\n        [\"icode\", icodes[E_icode]],\n        [\"ifun\", \"\" + E_ifun],\n        [\"valC\", valToHex(E_valC)],\n        [\"valA\", valToHex(E_valA)],\n        [\"valB\", valToHex(E_valB)],\n        [\"dstE\", regs[E_dstE]],\n        [\"dstM\", regs[E_dstM]],\n        [\"srcA\", regs[E_srcA]],\n        [\"srcB\", regs[E_srcB]]\n      ],\n      [\n        [\"stat\", stats[D_stat]],\n        [\"icode\", icodes[D_icode]],\n        [\"ifun\", \"\" + D_ifun],\n        [\"rA\", regs[D_rA]],\n        [\"rB\", regs[D_rB]],\n        [\"valC\", valToHex(D_valC)],\n        [\"valP\", valToHex(D_valP)]\n      ],\n      [[\"predPC\", valToHex(F_predPC)]]\n    ];\n  }\n}\n//Guarantee that addr is int32 and s, b is small enough\nclass Cache {\n  //l = 1 direact map\n  constructor(t = 60, s = 2, l = 1) {\n    //initialization\n    this.nextLevel = null;\n    this.s = s;\n    this.S = 1 << s;\n    this.t = t;\n    this.b = 64 - t - s;\n    this.B = 1 << this.b;\n    this.l = l;\n    this.set = [];\n    this.set.length = this.S;\n    for (let i = 0; i < this.set.length; i++) {\n      this.set[i] = [];\n      this.set[i].length = l;\n      for (let j = 0; j < l; j++) {\n        this.set[i][j] = {};\n        this.set[i][j].valid = false;\n        this.set[i][j].block = [\"\"];\n        this.set[i][j].block.length = this.B;\n      }\n    }\n  }\n  reset() {\n    for (let i = 0; i < this.set.length; i++)\n      for (let j = 0; j < this.set[i].length; j++) this.set[i][j].valid = false;\n  }\n  setNextLevel(L2) {\n    this.nextLevel = L2;\n  }\n  read(addr) {\n    //s + b should be small\n    let t = addr >> (this.s + this.b);\n    let s = (addr - (t << (this.s + this.b))) >> this.b;\n    let b = addr - (t << (this.s + this.b)) - (s << this.b);\n    for (let i = 0; i < this.set[s].length; i++) {\n      if (this.set[s][i].tag == t && this.set[s][i].valid == true) {\n        //Hit\n        console.log(\"hit\");\n        return this.set[s][i].block[b];\n      }\n    }\n    //Miss\n    console.log(\"miss\");\n    //Address of the first block, erase the least significant bits\n    let ad = (addr >> this.b) << this.b;\n    //Random replacement policy: Randomly choose a line to replace\n    let i = parseInt(Math.random() * this.set[s].length, 10);\n    this.set[s][i].valid = true;\n    this.set[s][i].tag = t;\n    //The bottom of Cache Hierarchy is Memory\n    if (!this.nextLevel)\n      for (let j = 0; j < this.B; j++) this.set[s][i].block[j] = Memory[ad + j];\n    else\n      for (let j = 0; j < this.B; j++)\n        this.set[s][i].block[j] = this.nextLevel.read(ad + j);\n    return this.set[s][i].block[b];\n  }\n  //Write-Through, almost the same\n  write(addr, val) {\n    let t = addr >> (this.s + this.b);\n    let s = (addr - (t << (this.s + this.b))) >> this.b;\n    let b = addr - (t << (this.s + this.b)) - (s << this.b);\n    for (let i = 0; i < this.set[s].length; i++) {\n      if (this.set[s][i].tag == t && this.set[s][i].valid == true) {\n        //hit\n        console.log(\"hit\");\n        this.set[s][i].block[b] = val;\n        break;\n      }\n    }\n    //No-write-allocate: When encountering a write miss, bypasses the cache and write directly to the next lower level\n    if (!this.nextLevel) Memory[addr] = val;\n    else this.nextLevel.write(addr, val);\n  }\n}\n\n/* Classes */\nclass RegisterFile {\n  constructor() {\n    this.A = VALZERO.slice();\n    this.B = VALZERO.slice();\n    this.M = VALZERO.slice();\n    this.E = VALZERO.slice();\n    /*this.B = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    this.M = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    this.E = [\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\",\"00\"];\n    */\n    this.srcA = this.srcB = this.dstM = this.dstE = RNONE;\n    this.registers = [VALZERO.slice()];\n    this.registers.length = 16;\n    for (let i = 0; i < 16; i++) this.registers[i] = this.A;\n    console.log(this.registers);\n  }\n  reset() {\n    this.A = VALZERO.slice();\n    this.B = VALZERO.slice();\n    this.M = VALZERO.slice();\n    this.E = VALZERO.slice();\n    for (let i = 0; i < 16; i++) this.registers[i] = VALZERO.slice();\n    this.srcA = this.srcB = this.dstM = this.dstE = RNONE;\n  }\n  read() {\n    this.A = this.registers[this.srcA].slice();\n    this.B = this.registers[this.srcB].slice();\n  }\n  write() {\n    //!caution, if dstE == dstM(!=RNONE)(e.g. pop %rsp), only to write dstM\n\n    this.registers[this.dstE] = this.E.slice();\n    this.registers[this.dstM] = this.M.slice();\n  }\n}\n\n/* Classes end */\n\nconst MAX_MEM = 800;\n\nconst IHALT = 0,\n  INOP = 1,\n  IRRMOVQ = 2,\n  IIRMOVQ = 3,\n  IRMMOVQ = 4,\n  IMRMOVQ = 5,\n  IOPQ = 6,\n  IJXX = 7,\n  ICALL = 8,\n  IRET = 9,\n  IPUSHQ = 10,\n  IPOPQ = 11;\nconst FNONE = 0;\nconst RNONE = 15,\n  RRSP = 4;\nconst ALUADD = 0;\nconst SAOK = 1,\n  SADR = 2,\n  SINS = 3,\n  SHLT = 4,\n  SBUB = 5;\nconst ZF = 4,\n  SF = 2,\n  OF = 1;\n\nconst VALZERO = [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"];\n\n/**  Stage Registers **/\nlet F_predPC = VALZERO.slice(),\n  F_stall,\n  F_bubble;\nlet D_stat, D_icode, D_ifun, D_rA, D_rB, D_valC, D_valP, D_stall, D_bubble;\nlet E_stat,\n  E_icode,\n  E_ifun,\n  E_dstE,\n  E_dstM,\n  E_srcA,\n  E_srcB,\n  E_valA,\n  E_valB,\n  E_valC,\n  E_stall,\n  E_bubble;\nlet M_stat, M_icode, M_Cnd, M_dstE, M_dstM, M_valA, M_valE, M_stall, M_bubble;\nlet W_stat, W_icode, W_dstE, W_dstM, W_valM, W_valE, W_stall, W_bubble;\n\n/** Stage outputs **/\nlet f_predPC,\n  f_stat,\n  f_icode,\n  f_ifun,\n  f_rA,\n  f_rB,\n  f_valC,\n  f_valP,\n  f_stall,\n  f_bubble;\nlet d_stat,\n  d_icode,\n  d_ifun,\n  d_valA,\n  d_valB,\n  d_valC,\n  d_dstE,\n  d_dstM,\n  d_srcA,\n  d_srcB,\n  d_stall,\n  d_bubble;\nlet e_stat, e_icode, e_Cnd, e_dstE, e_dstM, e_valA, e_valE, e_stall, e_bubble;\nlet m_stat, m_icode, m_dstE, m_dstM, m_valM, m_valE, m_stall, m_bubble;\n\nlet imem_error, dmem_error;\nlet Memory = [\"0\"];\nMemory.length = MAX_MEM;\n\n/*\n\nlet L1Cache = new Cache();\nlet L2Cache = new Cache();\n\nL1Cache.setNextLevel(L2Cache);\n*/\nlet cache = [];\n\n//cache.push(L1Cache);\n//cache.push(L2Cache);\n\nlet registerFile = new RegisterFile();\n\nlet alu_cc;\nlet set_cc;\nlet CC;\nlet Stat;\n\n//everything named val is stored by string array ,each byte\n\n//should be positive;\nfunction intToVal(x) {\n  let rtn = VALZERO.slice();\n  rtn.length = 8;\n  for (let i = 0; i < 8; i++) {\n    let temp = x & 0xff;\n    rtn[i] = temp.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n    x >>= 8;\n  }\n  return rtn;\n}\n/* return string */\nfunction valToHex(val) {\n  if (val == undefined) return \"0\";\n  let rtn = \"\";\n  let zero_front = true;\n  let i = 7;\n\n  while (i >= 0 && parseInt(val[i], 16) == 0) {\n    i--;\n  }\n  if (i < 0) return \"0\";\n  if (val[i][0] != \"0\") rtn += val[i][0];\n  rtn += val[i][1];\n  for (let j = i - 1; j >= 0; j--) {\n    rtn += val[j][0] + val[j][1];\n  }\n  return rtn;\n}\n//return a val\nfunction addq(valA, valB) {\n  let rtn = VALZERO.slice();\n  rtn.length = 8;\n  let carry = 0;\n  for (let i = 0; i < 8; i++) {\n    let int_sum = parseInt(valA[i], 16) + parseInt(valB[i], 16) + carry;\n    carry = int_sum >> 8;\n    let s = int_sum & 0xff;\n    let str_s = s.toString(16);\n    if (str_s.length == 1) rtn[i] = \"0\" + str_s;\n    else rtn[i] = str_s;\n  }\n  //overflow\n  //if (carry) console.log(\"overflow\");\n\n  return rtn;\n}\nfunction subq(valA, valB) {\n  let rtn = VALZERO.slice();\n  let notB = xorq(valB, [\"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\"]);\n  return addq(\n    valA,\n    addq(notB, [\"01\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"])\n  );\n}\nfunction andq(valA, valB) {\n  let rtn = VALZERO.slice();\n  rtn.length = 8;\n  for (let i = 0; i < 8; i++) {\n    let s = parseInt(valA[i], 16) & parseInt(valB[i], 16) & 0xff;\n    rtn[i] = s.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n  }\n  return rtn;\n}\nfunction xorq(valA, valB) {\n  let rtn = VALZERO.slice();\n  rtn.length = 8;\n  for (let i = 0; i < 8; i++) {\n    let s = (parseInt(valA[i], 16) ^ parseInt(valB[i], 16)) & 0xff;\n    rtn[i] = s.toString(16);\n    if (rtn[i].length == 1) rtn[i] = \"0\" + rtn[i];\n  }\n  return rtn;\n}\n\n/* read eight bytes from memory, return null when error*/\n/* return rtn = [\"00\", \"02\", ...] */\n/* opt = 0, read from cache, opt = 1, read directly from memory*/\nfunction readMemory(addr, bytes = 8, opt = 0) {\n  if (addr + bytes > MAX_MEM || addr < 0) {\n    return null;\n  }\n  let rtn = VALZERO.slice();\n  rtn.length = bytes;\n  for (let i = 0; i < bytes; i++) {\n    rtn[i] =\n      opt == 0 && cache.length > 0 ? cache[0].read(addr + i) : Memory[addr + i]; //read cache\n    //rtn[i] = Memory[addr + i];\n    if (rtn[i] == undefined) rtn[i] = \"00\";\n  }\n  return rtn;\n}\n/* write val into memory e.g. val = [\"00\", \"01\"]*/\nfunction writeMemory(addr, val) {\n  let len = val.length;\n  if (addr + len > MAX_MEM || addr < 0) return null;\n  for (let i = 0; i < len; i++) {\n    if (cache.length > 0) cache[0].write(addr + i, val[i]);\n    else Memory[addr + i] = val[i];\n  }\n  return true;\n}\n\nfunction setCode(code) {\n  let isValid = true;\n  for (let i = 0; i < code.length; i++) {\n    if (code[i] == \"\\n\") {\n      isValid = true;\n      continue;\n    }\n    if (\n      isValid &&\n      i + 2 < code.length &&\n      code[i] == \"0\" &&\n      code[i + 1] == \"x\"\n    ) {\n      isValid = false;\n\n      let hex_addr = \"\";\n      let addr;\n      i++;\n      //console.log(\"find it\" + code[i + 2] + code[i + 3] + code[i + 4]);\n      while (code[++i] == \"0\") {}\n      while (code[i] != \":\") hex_addr += code[i++];\n      addr = parseInt(hex_addr, 16);\n      if (isNaN(addr)) {\n        addr = 0;\n      }\n      i += 2;\n      let j;\n      for (j = 0; i + j < code.length && code[i + j] != \" \"; j = j + 2) {\n        Memory[addr + (j >> 1)] = code[i + j];\n        Memory[addr + (j >> 1)] += code[i + j + 1];\n      }\n      i += j - 1;\n    } else isValid = false;\n  }\n}\n\nfunction ops(a, b, ifun) {\n  let rtn;\n  switch (ifun) {\n    case 0:\n      rtn = addq(a, b);\n      break;\n    case 1:\n      rtn = subq(a, b);\n      break;\n    case 2:\n      rtn = andq(a, b);\n      break;\n    case 3:\n      rtn = xorq(a, b);\n      break;\n    default:\n      rtn = null;\n      break;\n  }\n  let rtn_sign = parseInt(rtn[7], 16) >> 7;\n  let a_sign = parseInt(a[7], 16) >> 7;\n  let b_sign = parseInt(b[7], 16) >> 7;\n  alu_cc = 0;\n  if (parseInt(valToHex(rtn), 16) == 0) alu_cc |= ZF;\n  if (rtn_sign == 1) alu_cc |= SF;\n  if (a_sign == b_sign && rtn_sign != a_sign) alu_cc |= OF;\n\n  return rtn;\n}\n\n/* long long */\nfunction check_f_pc() {\n  //!Mispredicted branch. Fetch at incremented PC\n  if (M_icode == IJXX && !M_Cnd) return M_valA;\n  //!Completion of RET instruction\n  else if (W_icode == IRET) return W_valM;\n  //!Default: Use predicted P\n  else return F_predPC;\n}\n// return bool\nfunction check_f_instr_valid(icode, ifun) {\n  switch (icode) {\n    case IJXX:\n    case IRRMOVQ:\n      return ifun < 7;\n    case IOPQ:\n      return ifun < 4;\n    default:\n      return ifun < 1;\n  }\n}\n//return bool\nfunction check_f_need_regids(icode) {\n  switch (icode) {\n    case IHALT:\n    case INOP:\n    case IJXX:\n    case ICALL:\n    case IRET:\n      return false;\n    default:\n      return true;\n  }\n}\n//return bool\nfunction check_f_need_valC(icode) {\n  switch (icode) {\n    case IIRMOVQ:\n    case IRMMOVQ:\n    case IMRMOVQ:\n    case IJXX:\n    case ICALL:\n      return true;\n    default:\n      return false;\n  }\n}\n//return int\nfunction check_f_stat(imem_error, instr_valid, icode) {\n  if (imem_error == true) return SADR;\n  else if (!instr_valid == true) return SINS;\n  else if (icode == IHALT) return SHLT;\n  else return SAOK;\n}\n//return int\nfunction check_d_srcA() {\n  switch (D_icode) {\n    case IRRMOVQ:\n    case IRMMOVQ:\n    case IOPQ:\n    case IPUSHQ:\n      return D_rA;\n    case IPOPQ:\n    case IRET:\n      return RRSP;\n    default:\n      return RNONE;\n  }\n}\n\n//return  int\nfunction check_d_srcB() {\n  switch (D_icode) {\n    case IMRMOVQ:\n    case IRMMOVQ:\n    case IOPQ:\n      return D_rB;\n\n    case IPUSHQ:\n    case IPOPQ:\n    case ICALL:\n    case IRET:\n      return RRSP;\n    default:\n      return RNONE;\n  }\n}\n//return int\nfunction check_d_dstM() {\n  switch (D_icode) {\n    case IMRMOVQ:\n    case IPOPQ:\n      return D_rA;\n    default:\n      return RNONE;\n  }\n}\n//return int\nfunction check_d_dstE() {\n  switch (D_icode) {\n    case IRRMOVQ: //condition move\n    case IIRMOVQ:\n    case IOPQ:\n      return D_rB;\n    case IPUSHQ:\n    case IPOPQ:\n    case ICALL:\n    case IRET:\n      return RRSP;\n    default:\n      return RNONE;\n  }\n}\n//return long long(long long d_rvalA)\nfunction check_d_valA(d_srcA, d_rvalA) {\n  if (D_icode == ICALL || D_icode == IJXX) {\n    return D_valP;\n  } else if (d_srcA == e_dstE) {\n    return e_valE;\n  } else if (d_srcA == M_dstM) {\n    return m_valM;\n  } else if (d_srcA == M_dstE) {\n    return M_valE;\n  } else if (d_srcA == W_dstM) {\n    return W_valM;\n  } else if (d_srcA == W_dstE) {\n    return W_valE;\n  } else return d_rvalA;\n}\n\n//return long long(long long d_rvalB)\nfunction check_d_valB(d_srcB, d_rvalB) {\n  if (d_srcB == e_dstE) {\n    return e_valE;\n  } else if (d_srcB == M_dstM) {\n    return m_valM;\n  } else if (d_srcB == M_dstE) {\n    return M_valE;\n  } else if (d_srcB == W_dstM) {\n    return W_valM;\n  } else if (d_srcB == W_dstE) {\n    return W_valE;\n  } else return d_rvalB;\n}\n\n//long long: return, valA, valC\nfunction check_e_aluA(icode, valA, valC) {\n  switch (icode) {\n    case IRRMOVQ:\n    case IOPQ:\n      return valA;\n\n    case IIRMOVQ:\n    case IRMMOVQ:\n    case IMRMOVQ:\n      return valC;\n\n    case ICALL:\n    case IPUSHQ:\n      return [\"f8\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\", \"ff\"];\n    //subq(VALZERO.slice());\n\n    case IRET:\n    case IPOPQ:\n      return [\"08\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"];\n    //other operation don't need aluB\n    default:\n      return VALZERO;\n  }\n}\n//long long: return, valB, valC\nfunction check_e_aluB(icode, valB, valC) {\n  switch (icode) {\n    case IRMMOVQ:\n    case IMRMOVQ:\n    case IOPQ:\n    case ICALL:\n    case IPUSHQ:\n    case IRET:\n    case IPOPQ:\n      return valB;\n\n    case IRRMOVQ:\n    case IIRMOVQ:\n      return VALZERO;\n    //other operation don't need aluB\n    default:\n      return VALZERO;\n  }\n}\n//long long: return, a, b, t\n//!alu_cc global, modify it also\nfunction check_e_valE(alufun, valA, valB) {\n  return ops(valA, valB, alufun);\n}\n\n//return bool\n/************ modify it ***********/\nfunction check_e_cond(ifun) {\n  switch (ifun) {\n    case 1:\n      return CC & (ZF | SF);\n    case 2:\n      return CC & SF;\n    case 3:\n      return CC & ZF;\n    case 4:\n      return !(CC & ZF);\n    case 5:\n      return !(CC & SF);\n    case 6:\n      return !(CC & (ZF | SF));\n    default:\n      return true;\n  }\n}\n\n//long long: return, valA, valE\nfunction check_m_mem_addr(icode, valA, valE) {\n  switch (icode) {\n    case IRMMOVQ:\n    case IPUSHQ:\n    case ICALL:\n    case IMRMOVQ:\n      return valE;\n\n    case IPOPQ:\n    case IRET:\n      return valA;\n    default:\n      return VALZERO;\n  }\n}\n\nfunction doFetch() {\n  /* Stage values */\n  //bool\n  let instr_valid, need_regids, need_valC;\n  //let imem_error;\n\n  let stat;\n\n  /* should be long long */\n  let pc;\n  let predPC;\n  let valC, valP;\n\n  //int\n  let split, align;\n  let icode, ifun;\n  let rA, rB;\n\n  /** Select PC **/\n\n  //now pc is a int\n  pc = parseInt(valToHex(check_f_pc()), 16);\n  //console.log(\"pc is\" + pc);\n  /** Fetch **/\n  split = readMemory(pc, 1);\n  align = readMemory(pc + 1, 1);\n  //console.log(split);\n  //console.log(align);\n  icode = parseInt(split[0][0], 16);\n  ifun = parseInt(split[0][1], 16);\n  //console.log(\"icode: \" + icode + \", ifun\" + ifun);\n\n  //bool\n  instr_valid = check_f_instr_valid(icode, ifun);\n  need_regids = check_f_need_regids(icode);\n  need_valC = check_f_need_valC(icode);\n  //console.log(need_regids);\n  stat = check_f_stat(imem_error, instr_valid, icode);\n\n  rA = need_regids ? parseInt(align[0][0], 16) : RNONE;\n  rB = need_regids ? parseInt(align[0][1], 16) : RNONE;\n\n  valC = need_valC ? readMemory(pc + 1 + need_regids) : VALZERO.slice();\n\n  valP = intToVal(pc + 1 + need_regids + (need_valC << 3));\n\n  predPC =\n    icode == IJXX || icode == ICALL\n      ? intToVal(parseInt(valToHex(valC), 16))\n      : valP;\n\n  /** Update **/\n  f_stat = stat;\n  f_icode = icode;\n  f_ifun = ifun;\n  f_rA = rA;\n  f_rB = rB;\n  f_valC = valC.slice();\n  f_valP = valP.slice();\n  f_predPC = predPC.slice();\n  /*\n  console.log(\"f_stat: \" + f_stat);\n  console.log(\"f_icode: \" + f_icode);\n  console.log(\"f_ifun: \" + f_ifun);\n  console.log(\"f_rA: \" + f_rA);\n  console.log(\"f_rB:\" + f_rB);\n\n  console.log(\"f_valC: \" + f_valC);\n  console.log(\"f_valP: \" + f_valP);\n  console.log(\"f_predPC: \" + f_predPC);*/\n}\nfunction doDecode() {\n  let stat;\n\n  let rvalA, rvalB;\n  let dstE, dstM;\n  let valA, valB;\n\n  let srcA, srcB;\n\n  dstE = check_d_dstE();\n  dstM = check_d_dstM();\n  srcA = check_d_srcA();\n  srcB = check_d_srcB();\n\n  registerFile.srcA = srcA;\n  registerFile.srcB = srcB;\n  ///read registerFile as if it were a combinational logic\n  ///i.e. update the read port A B immediately.\n  registerFile.read();\n\n  //should not be modified;\n  rvalA = registerFile.A;\n  rvalB = registerFile.B;\n\n  /** Sel + Fwd A and Fwd B **/\n  valA = check_d_valA(srcA, rvalA);\n  valB = check_d_valB(srcB, rvalB);\n\n  /** Update **/\n  Stat = W_stat == SBUB ? SAOK : W_stat;\n\n  d_stat = D_stat;\n  d_icode = D_icode;\n  d_ifun = D_ifun;\n  d_valC = D_valC.slice();\n  d_valA = valA.slice();\n  d_valB = valB.slice();\n  d_dstE = dstE;\n  d_dstM = dstM;\n  d_srcA = srcA;\n  d_srcB = srcB;\n\n  /** print **/\n\n  console.log(\"d_stat: \" + d_stat);\n  console.log(\"d_icode: \" + d_icode);\n  console.log(\"d_ifun: \" + d_ifun);\n  console.log(\"d_valC: \" + d_valC);\n  console.log(\"d_valA: \" + d_valA);\n  console.log(\"d_valB: \" + d_valB);\n  console.log(\"d_dstE: \" + d_dstE);\n\n  return 0;\n}\nfunction doExecute() {\n  //alu_cc;//!cc from alu\n  let cond;\n  let alufun;\n  let dstE;\n\n  let aluA, aluB;\n  let valE;\n\n  alufun = E_icode == IOPQ ? E_ifun : ALUADD;\n  aluA = check_e_aluA(E_icode, E_valA, E_valC);\n  aluB = check_e_aluB(E_icode, E_valB, E_valC);\n\n  set_cc =\n    E_icode == IOPQ &&\n    !(\n      m_stat == SADR ||\n      m_stat == SINS ||\n      m_stat == SHLT ||\n      (W_stat == SADR || W_stat == SINS || W_stat == SHLT)\n    );\n\n  //!also update alu_cc\n  valE = ops(aluB, aluA, alufun);\n\n  cond = !!check_e_cond(E_ifun);\n  //!update dstE according to condition codes\n  dstE = E_icode == IRRMOVQ ? (cond ? E_dstE : RNONE) : E_dstE;\n\n  /** Update **/\n  if (set_cc) {\n    CC = alu_cc;\n    console.log(\"updateCC: \" + CC);\n  }\n\n  e_stat = E_stat;\n  e_icode = E_icode;\n  e_Cnd = cond;\n  e_valE = valE.slice();\n  e_valA = E_valA.slice();\n  e_dstE = dstE;\n  e_dstM = E_dstM;\n  /*\n  console.log(\"CC: \" + CC);\n  console.log(\"e_stat: \" + e_stat);\n  console.log(\"e_icode: \" + e_icode);\n  console.log(\"e_Cnd: \" + e_Cnd);\n  console.log(\"e_valE: \" + e_valE);\n  console.log(\"e_valA: \" + e_valA);\n  console.log(\"e_dstE: \" + e_dstE);\n  console.log(\"e_dstM: \" + e_dstM);\n  */\n}\nfunction doMemory() {\n  let stat;\n  dmem_error = false;\n  let mem_read, mem_write;\n  //long long\n  let data_in, addr;\n  let valM = VALZERO.slice();\n\n  mem_read = M_icode == IMRMOVQ || M_icode == IPOPQ || M_icode == IRET;\n  mem_write = M_icode == IRMMOVQ || M_icode == IPUSHQ || M_icode == ICALL;\n\n  addr = parseInt(valToHex(check_m_mem_addr(M_icode, M_valA, M_valE)), 16);\n  data_in = M_valA;\n\n  if (mem_read) valM = readMemory(addr, 8);\n\n  let temp = 1;\n  if (mem_write) {\n    temp = writeMemory(addr, data_in);\n  }\n  if (valM == null || temp == null) dmem_error = true;\n\n  stat = dmem_error ? SADR : M_stat;\n\n  /** Update **/\n  m_stat = stat;\n  m_icode = M_icode;\n  m_valE = M_valE.slice();\n  m_valM = valM.slice();\n  m_dstE = M_dstE;\n  m_dstM = M_dstM;\n\n  console.log(\"\");\n}\nfunction doWriteback() {\n  Stat = W_stat == SBUB ? SAOK : W_stat;\n\n  registerFile.dstE = W_dstE;\n  registerFile.dstM = W_dstM;\n  registerFile.E = W_valE.slice();\n  registerFile.M = W_valM.slice();\n}\n\nfunction doControlLogic() {\n  let mispredicted_branch = E_icode == IJXX && !e_Cnd;\n  let load_use_hazard =\n    (E_icode == IMRMOVQ || E_icode == IPOPQ) &&\n    (E_dstM == d_srcA || E_dstM == d_srcB);\n  let exception =\n    m_stat == SADR ||\n    m_stat == SINS ||\n    m_stat == SHLT ||\n    (W_stat == SADR || W_stat == SINS || W_stat == SHLT);\n\n  F_stall =\n    load_use_hazard || (D_icode == IRET || E_icode == IRET || M_icode == IRET);\n  F_bubble = false;\n\n  D_stall = load_use_hazard;\n  D_bubble =\n    (E_icode == IJXX && !e_Cnd) ||\n    (!(\n      (E_icode == IMRMOVQ || E_icode == IPOPQ) &&\n      (E_dstM == d_srcA || E_dstM == d_srcB)\n    ) &&\n      (D_icode == IRET || E_icode == IRET || M_icode == IRET));\n\n  E_stall = false;\n  E_bubble = mispredicted_branch || load_use_hazard;\n\n  W_stall = W_stat == SADR || W_stat == SINS || W_stat == SHLT;\n  W_bubble = false;\n\n  M_stall = false;\n  M_bubble =\n    W_stat == SADR ||\n    W_stat == SINS ||\n    W_stat == SHLT ||\n    (m_stat == SADR || m_stat == SINS || m_stat == SHLT);\n}\n\nfunction resetW() {\n  W_stall = false;\n  W_bubble = true;\n  W_stat = SBUB;\n  W_icode = INOP;\n  W_valE = VALZERO.slice();\n  W_valM = VALZERO.slice();\n  W_dstE = RNONE;\n  W_dstM = RNONE;\n}\nfunction resetM() {\n  M_stall = false;\n  M_bubble = true;\n  M_stat = SBUB;\n  M_icode = INOP;\n  M_valA = VALZERO.slice();\n  M_valE = VALZERO.slice();\n  M_dstE = RNONE;\n  M_dstM = RNONE;\n  M_Cnd = 0;\n}\nfunction resetE() {\n  E_stall = false;\n  E_bubble = true;\n  E_stat = SBUB;\n  E_icode = INOP;\n  E_ifun = 0;\n  E_valA = VALZERO.slice();\n  E_valB = VALZERO.slice();\n  E_valC = VALZERO.slice();\n  E_srcA = RNONE;\n  E_srcB = RNONE;\n  E_dstE = RNONE;\n  E_dstM = RNONE;\n}\n\nfunction resetD() {\n  D_stall = false;\n  D_bubble = true;\n  D_stat = SBUB;\n  D_icode = INOP;\n  D_ifun = 0;\n  D_rA = RNONE;\n  D_rB = RNONE;\n  D_valC = VALZERO.slice();\n  D_valP = VALZERO.slice();\n}\nfunction resetF() {\n  F_stall = false;\n  F_bubble = true;\n  F_predPC = VALZERO.slice();\n}\n\nfunction updateStageRegisters() {\n  if (W_bubble) {\n    resetW();\n  } else if (!W_stall) {\n    W_stat = m_stat;\n    W_icode = m_icode;\n    W_valE = m_valE.slice();\n    W_valM = m_valM.slice();\n    W_dstE = m_dstE;\n    W_dstM = m_dstM;\n  }\n\n  if (M_bubble) {\n    resetM();\n  } else if (!W_stall) {\n    M_stat = e_stat;\n    M_icode = e_icode;\n    M_valA = e_valA.slice();\n    M_valE = e_valE.slice();\n    M_dstE = e_dstE;\n    M_dstM = e_dstM;\n    M_Cnd = e_Cnd;\n  }\n\n  if (E_bubble) {\n    resetE();\n  } else if (!E_stall) {\n    E_stat = d_stat;\n    E_icode = d_icode;\n    E_ifun = d_ifun;\n    E_valA = d_valA.slice();\n    E_valB = d_valB.slice();\n    E_valC = d_valC.slice();\n    E_srcA = d_srcA;\n    E_srcB = d_srcB;\n    E_dstE = d_dstE;\n    E_dstM = d_dstM;\n  }\n\n  if (D_bubble) {\n    resetD();\n  } else if (!D_stall) {\n    D_stat = f_stat;\n    D_icode = f_icode;\n    D_ifun = f_ifun;\n    D_rA = f_rA;\n    D_rB = f_rB;\n    D_valC = f_valC.slice();\n    D_valP = f_valP.slice();\n  }\n  if (F_bubble) {\n    resetF();\n    //!no stat in regF\n  } else if (!F_stall) F_predPC = f_predPC;\n}\nfunction init() {\n  /* reset memory */\n  Memory = [\"0\"];\n  Memory.length = MAX_MEM;\n  /* reset the caches */\n  for (let i = 0; i < cache.length; i++) {\n    cache[i].reset();\n  }\n  /** reset registerFile **/\n  registerFile.reset();\n\n  /** reset stage registers**/\n  resetF();\n  resetD();\n  resetE();\n  resetM();\n  resetW();\n\n  /** reset Condition Code **/\n  CC = ZF;\n\n  /** reset Stat **/\n  Stat = SAOK;\n}\n\nfunction printStageRegisters() {\n  console.log(\"[Writeback]\");\n  console.log(\n    \"stat[\" +\n      W_stat +\n      \"] icode[\" +\n      W_icode +\n      \"] valE[\" +\n      W_valE +\n      \"] valM[\" +\n      W_valM +\n      \"] dstE[\" +\n      W_dstE +\n      \"]\" +\n      \"] dstM[\" +\n      W_dstM +\n      \"]\"\n  );\n  console.log(\"[Memory]\");\n  console.log(\n    \"stat[\" +\n      M_stat +\n      \"]  icode[\" +\n      M_icode +\n      \"]  Cnd[\" +\n      M_Cnd +\n      \"]  valE[\" +\n      M_valE +\n      \"]  valA[\" +\n      M_valA +\n      \"]  dstE[\" +\n      M_dstE +\n      \"]  dstM[\" +\n      M_dstM +\n      \"]\"\n  );\n  console.log(\"[Execute]\");\n  console.log(\n    \"stat[\" +\n      E_stat +\n      \"]  icode[\" +\n      E_icode +\n      \"]  ifun[\" +\n      E_ifun +\n      \"]  valC[\" +\n      E_valC +\n      \"]  valA[\" +\n      E_valA +\n      \"]  valB[\" +\n      E_valB +\n      \"]  dstE[\" +\n      E_dstE +\n      \"]  dstM[\" +\n      E_dstM +\n      \"]  srcA[\" +\n      E_srcA +\n      \"]  srcB[\" +\n      E_srcB +\n      \"]\"\n  );\n  console.log(\"[Decode]\");\n  console.log(\n    \"stat[\" +\n      D_stat +\n      \"]  icode[\" +\n      D_icode +\n      \"]  ifun[\" +\n      D_ifun +\n      \"]  rA[\" +\n      D_rA +\n      \"]  rB[\" +\n      D_rB +\n      \"]  valC[\" +\n      D_valC +\n      \"]  valP[\" +\n      D_valP +\n      \"]\"\n  );\n  console.log(\"[Fetch]\");\n  console.log(\"predPC[\" + F_predPC + \"]\");\n}\nfunction stepi(steps) {\n  for (let i = 0; i < steps; i++) {\n    step();\n  }\n  if (Stat == SINS || Stat == SADR || Stat == SHLT) {\n    return Stat;\n  }\n  return 0;\n}\nfunction step() {\n  /** Exception **/\n\n  if (Stat == SINS || Stat == SADR || Stat == SHLT) {\n    return 1;\n  }\n  //console.log(\"clock cycle begins!\");\n  /** clock cycle begins **/\n\n  ///update the stage registers and registerFile\n  updateStageRegisters();\n  registerFile.write();\n\n  ///running pipeline\n  doWriteback();\n  doMemory();\n  doExecute();\n  doDecode();\n  doFetch();\n\n  ///update the control logic\n  doControlLogic();\n\n  /** clock cycle ends **/\n  //console.log(\"clock cycle ends\");\n  //printStageRegisters();\n  //console.log(registerFile);\n  return 0;\n}\n"]},"metadata":{},"sourceType":"module"}